#================================ Utility ====================================
# Get Member
admin-report.member=select distinct groupid, group_name_en from spm_group (nolock) where aiflag=1 and deleted ='0' order by group_name_en
admin-report.branch=select g.GROUPID branchid, '['+p.aicode+']-'+g.GROUP_NAME_EN as branch_name from SPM_GROUP g (nolock) inner join SPM_GROUP P (nolock) on g.PARENTGROUPID = p.GROUPID where g.parentgroupid in (select distinct groupid from spm_group  (nolock) where aiflag=1 and deleted ='0') order by p.aicode,g.GROUP_NAME_EN
admin-report.branch-specify=select g.GROUPID  branchid , '['+p.aicode+']-'+g.GROUP_NAME_EN as branch_name from SPM_GROUP g (nolock) inner join SPM_GROUP P (nolock) on g.PARENTGROUPID = p.GROUPID where g.parentgroupid in (select distinct groupid from spm_group  (nolock) where groupid = {0} and aiflag=1 and deleted ='0') order by p.aicode,g.GROUP_NAME_EN
admin-report.branch-specify-branch=select g.GROUPID  branchid , '['+p.aicode+']-'+g.GROUP_NAME_EN as branch_name from SPM_GROUP g (nolock) inner join SPM_GROUP P (nolock) on g.PARENTGROUPID = p.GROUPID where g.groupid = {0} order by p.aicode,g.GROUP_NAME_EN
admin-report.branch.member=select parentgroupid from spm_group (nolock) where groupid = {0}
admin-report.nonmember.branch.list-all=select t.groupid branchid,t.parentgroupid parentgroupid,t.group_name_en branch_name from spm_group t (nolock) where t.groupid !=2 and t.aiflag !=1 and t.DELETED = 0 order by parentgroupid
admin-report.user-detailed=select uid,userid from spm_user (nolock) where deleted = 0 and groupaiid = 1 and groupccraid in(select DISTINCT groupccraid from SPM_USER (nolock) WHERE groupid in(select distinct groupid FROM spm_group (nolock) where PARENTGROUPID = {0}) ) or (groupccraid = {0} and deleted = 0) order by userid
admin-report.user-detailed.level.system=select uid,userid from spm_user (nolock) where deleted = 0 and groupccraid = 1 order by userid
admin-report.user-detailed.member=select groupaiid,groupid from spm_user (nolock) where uid = {0}
admin-report.user-detailed-specify=select uid,userid from spm_user (nolock) where deleted = 0 and groupaiid = {0} order by userid
admin-report.user-detailed-specify-branch=select uid,userid from spm_user (nolock) where deleted = 0 and groupid = {0} order by userid
admin-report.member-specify=select groupid, group_name_en from spm_group (nolock) where groupid = {0}
admin-report.file-rejection.receive-date=select groupid,period, receiveddate, registrationfileid, controlfilename from load_registrationfile (nolock) where groupid = {0} and period = '{1}'
admin-report.inputfile-summary.receive-date=select groupid,period, receiveddate, registrationfileid, controlfilename from load_registrationfile (nolock) where groupid = {0} and period = '{1}'

# Member List
admin-report.get-all-csv=SELECT group_name_en AS name, groupid AS code, aicode AS aicode FROM spm_group g (nolock) WHERE g.aiflag = 1 ORDER BY code
admin-report.get-all-group=select groupid, aicode member, group_name_en membername from spm_group (nolock) where aiflag = 1 order by {0} {1}
admin-report.get-specify-group=select groupid, aicode member, group_name_en membername from spm_group (nolock) where aiflag = 1 and groupid = '{0}'
admin-report.get-specify-monthlyplan=select groupid ,aicode member ,group_name_en membername from spm_group (nolock) where monthly_plan in ({0}) and disabled = 0 and deleted = 0

# User List
admin-report.user-list=select distinct uid, case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where groupaiid = {0} order by userid 
#admin-report.user-list=select distinct uid, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where groupaiid = {0} order by userid
admin-report.user=select distinct uid, case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where groupaiid = {0} and ((disabled = 0 and deleted = 0) or ((disabled = 1 or deleted = 1) and updateddate > convert(datetime, '{1}', 101)))
#admin-report.user=select distinct uid, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where groupaiid = {0} and ((disabled = 0 and deleted = 0) or ((disabled = 1 or deleted = 1) and updateddate > convert(datetime, '{1}', 101)))
admin-report.get-specify-userID=select uid, case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where uid = {0}
#admin-report.get-specify-userID=select uid, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where uid = {0}

#================================ Data Load ====================================

# Full File Rejection Report
admin-report.file-rejection-master=select load_regis.groupid groupid, load_regis.registrationfileid as dataloadid, load_regis.period as period, load_regis.receiveddate as receiveddate, load_regis.controlfilename as controlfilename, load_regis.processdate as dataloaddate from load_registrationfile load_regis (nolock) where load_regis.processstatus < 0 and load_regis.groupid = {0} and load_regis.period = {1}
admin-report.file-rejection-master-user=select load_regis.groupid groupid, load_regis.registrationfileid as dataloadid, load_regis.period as period, load_regis.receiveddate as receiveddate, load_regis.controlfilename as controlfilename, load_regis.processdate as dataloaddate from load_registrationfile load_regis (nolock) where load_regis.processstatus < 0 and load_regis.groupid = {0} and load_regis.period = {1} and load_regis.registrationfileid = {2}
admin-report.file-rejection-detail=select distinct load_val.errorstatus errorcode, load_val.errordesc errorstatus from load_registrationfile load_regis (nolock) left outer join load_validation_log load_val (nolock) on load_regis.registrationfileid = load_val.registrationid where load_regis.processstatus < 0 and load_regis.groupid = {0} and load_regis.period = {1} and load_regis.registrationfileid = {2}

# Validation Error Report
#admin-report.validation-error.specific-groupid=select load_regis.groupid, load_regis.receivedby as operator, load_regis.registrationfileid as dataloadid,  load_regis.period as period, load_regis.receiveddate as receiveddate,load_regis.controlfilename, load_regis.processdate as dataloaddate, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, load_regis.threshold as validateresult, (select count(distinct(load_val.seqload)) from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid  and load_val.groupid = load_regis.groupid and load_val.tabletype is not null) as errorrecord  from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid  and load_regis.groupid = load_regisdata.groupid  and load_regis.groupid = {0}  and load_regis.registrationfileid = {1} group by load_regis.groupid, load_regis.receivedby,  load_regis.registrationfileid,  load_regis.period,load_regis.receiveddate, load_regis.controlfilename, load_regis.processdate, load_regis.threshold
admin-report.validation-error.specific-groupid=select load_regis.groupid, load_regis.receivedby as operator, load_regis.registrationfileid as dataloadid,  load_regis.period as period, load_regis.receiveddate as receiveddate,load_regis.controlfilename, load_regis.processdate as dataloaddate, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, load_regis.threshold as validateresult, (select count(total) from (select count(load_val.seqload) total from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid and load_val.groupid = load_regis.groupid and load_val.tabletype is not null and load_val.tabletype <> 'U' group by tabletype, seqload ) as a) as errorrecord  from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid  and load_regis.groupid = load_regisdata.groupid  and load_regis.groupid = {0}  and load_regis.registrationfileid = {1} group by load_regis.groupid, load_regis.receivedby,  load_regis.registrationfileid,  load_regis.period,load_regis.receiveddate, load_regis.controlfilename, load_regis.processdate, load_regis.threshold
#admin-report.validation-error.master=select load_regis.groupid, load_regis.receivedby as operator, load_regis.registrationfileid as dataloadid,  load_regis.period as period, load_regis.receiveddate as receiveddate,load_regis.controlfilename, load_regis.processdate as dataloaddate, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, load_regis.threshold as validateresult, (select count(distinct(load_val.seqload)) from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid  and load_val.groupid = load_regis.groupid and load_val.tabletype is not null) as errorrecord  from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata  where load_regis.registrationfileid = load_regisdata.registrationfileid  and load_regis.groupid = load_regisdata.groupid  and load_regis.groupid = {0}  and load_regis.period = {1} group by load_regis.groupid, load_regis.receivedby,  load_regis.registrationfileid,  load_regis.period,load_regis.receiveddate, load_regis.controlfilename, load_regis.processdate, load_regis.threshold
admin-report.validation-error.master=select load_regis.groupid, load_regis.receivedby as operator, load_regis.registrationfileid as dataloadid,  load_regis.period as period, load_regis.receiveddate as receiveddate,load_regis.controlfilename, load_regis.processdate as dataloaddate, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, load_regis.threshold as validateresult, (select count(total) from (select count(load_val.seqload) total from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid and load_val.groupid = load_regis.groupid and load_val.tabletype is not null and load_val.tabletype <> 'U' group by tabletype, seqload ) as a) as errorrecord  from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid  and load_regis.groupid = load_regisdata.groupid  and load_regis.groupid = {0}  and load_regis.period = {1} group by load_regis.groupid, load_regis.receivedby,  load_regis.registrationfileid,  load_regis.period,load_regis.receiveddate, load_regis.controlfilename, load_regis.processdate, load_regis.threshold
admin-report.validation-error.datail=select load_val.brc_no as hkbrcno, load_val.ci_no as hkcino,load_val.other_reg_no, load_val.place_of_reg, load_val.customer_no,load_val.errorstatus, load_val.errordesc from load_registrationfile load_regis (nolock) left outer join load_validation_log load_val (nolock) on load_regis.registrationfileid = load_val.registrationid and load_regis.groupid = load_val.groupid where load_regis.groupid = {0} and load_regis.period = {1} and load_val.tabletype <> 'U' and load_regis.registrationfileid = {2} order by {3}, {4}

# Validation Error Report - CSV
admin-report.validation-error.csv.master.specific.group=and load_regis.groupid = {0}
admin-report.validation-error.csv.detail.specific.group=and load_regis.groupid = {0}
admin-report.validation-error.csv.master.specific.fileid=and load_regis.registrationfileid = {0}
admin-report.validation-error.csv.detail.specific.fileid=and load_regis.registrationfileid = {0}
admin-report.validation-error.csv.master.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.validation-error.csv.detail.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
#admin-report.validation-error.csv.master=select '{3}' as "Report Date", '{4}' as "Requested By", (select spm_group.aicode from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as "Member Name", (select userid from spm_user (nolock)  where spm_user.uid = load_regis.receivedby) as "Operator", load_regis.registrationfileid as "Data Load ID",  load_regis.period as "Data Period", dbo.convert_date((select data.registereddate from load_registrationdata data where load_regis.registrationfileid = data.registrationfileid and data.datafiletype = 'F')) as "Received Date", load_regis.controlfilename as "Control File Number", datename(dd,load_regis.processdate)+' '+datename(mm,load_regis.processdate)+' '+datename(yyyy,load_regis.processdate) as "Data Load Date", (select statusdesc from base_loadstatus loader where loader.loadstatusid = load_regis.processstatus) "Status", sum(load_regisdata.totalofvalidaterecord) as "Total Records",  (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as "Validation Threshold", load_regis.threshold as "Validation Result (%)", (select count(distinct(load_val.seqload)) from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid  and load_val.groupid = load_regis.groupid and load_val.tabletype is not null and load_val.tabletype <> 'U') as "Number of Error Records"  from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock), spm_group (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid  and load_regis.groupid = load_regisdata.groupid  and load_regis.groupid = spm_group.groupid and load_regis.period = {0} {1} {2} group by load_regis.groupid, load_regis.receivedby,  load_regis.registrationfileid,  load_regis.period, load_regis.receiveddate, load_regis.controlfilename, load_regis.processdate, load_regis.threshold, load_regis.processstatus order by {5}
admin-report.validation-error.csv.master=select '{3}' as "Report Date", '{4}' as "Requested By", (select spm_group.aicode from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as "Member Name", (select case  when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0) then spm_user.userid  else  substring(spm_user.userid, 1,len(spm_user.userid)-(len(spm_user.uid)+1)) end  end as userid from spm_user (nolock)  where spm_user.uid = load_regis.receivedby) as "Operator", load_regis.registrationfileid as "Data Load ID",  load_regis.period as "Data Period", dbo.convert_date((select data.registereddate from load_registrationdata data (nolock) where load_regis.registrationfileid = data.registrationfileid and data.datafiletype = 'F')) as "Received Date", load_regis.controlfilename as "Control File Number", datename(dd,load_regis.processdate)+' '+datename(mm,load_regis.processdate)+' '+datename(yyyy,load_regis.processdate) as "Data Load Date", (select statusdesc from base_loadstatus loader (nolock) where loader.loadstatusid = load_regis.processstatus) "Status", sum(load_regisdata.totalofvalidaterecord) as "Total Records",  (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as "Validation Threshold", load_regis.threshold as "Validation Result (%)", (select count(total) from (select count(load_val.seqload) total from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid and load_val.groupid = load_regis.groupid and load_val.tabletype is not null and load_val.tabletype <> 'U' group by tabletype, seqload ) as a) as "Number of Error Records"  from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock), spm_group (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid  and load_regis.groupid = load_regisdata.groupid  and load_regis.groupid = spm_group.groupid and load_regis.period = {0} {1} {2} group by load_regis.groupid, load_regis.receivedby,  load_regis.registrationfileid,  load_regis.period, load_regis.receiveddate, load_regis.controlfilename, load_regis.processdate, load_regis.threshold, load_regis.processstatus order by {5}
admin-report.validation-error.csv.detail=select distinct '{5}' as "Report Date", '{6}' as "Requested By", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", (select case  when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0) then spm_user.userid  else  substring(spm_user.userid, 1,len(spm_user.userid)-(len(spm_user.uid)+1)) end  end as userid from spm_user (nolock)  where spm_user.uid = load_regis.receivedby) as "Operator", load_regis.registrationfileid as "Data Load ID", load_regis.period as "Data Period", load_regis.controlfilename as "Control File Number", load_val.brc_no as "HKBRC", load_val.ci_no as "HKCI", load_val.other_reg_no as "Other Registration / Incorporation Number", load_val.place_of_reg as "Place of Registration / Incorporation", load_val.customer_no as "Customer Number", load_val.errorstatus as "Error Code", load_val.errordesc as "Error Description" from load_registrationfile load_regis (nolock) left outer join load_validation_log load_val (nolock) on load_regis.registrationfileid = load_val.registrationid and load_regis.groupid = load_val.groupid inner join spm_group (nolock) on load_regis.groupid = spm_group.groupid where load_val.tabletype is not null and load_val.tabletype <> 'U' and load_regis.period = {0} {1} {2} order by {7}, {3}, {4}

# Monthly Data Submission Activity Report
admin-report.monthly-submission-all=select spm_group.group_name_en member, base_loadstatus.statusdesc as inputstatus, cast(load_regis.period + case when spm_group.submission_day > 9 then cast(spm_group.submission_day as char(2)) when spm_group.submission_day <= 9 then '0'+cast(spm_group.submission_day as char(2)) end as datetime) scheduledate, load_data.registereddate receiveddate, datediff(day, cast(load_regis.period + case when spm_group.submission_day > 9 then cast(spm_group.submission_day as char(2)) when spm_group.submission_day <= 9 then '0'+ cast(spm_group.submission_day as char(2)) end as datetime), load_data.registereddate)as overdue from load_registrationfile load_regis (nolock), spm_group (nolock), base_loadstatus (nolock), load_registrationdata load_data (nolock) where load_regis.groupid = spm_group.groupid and load_regis.processstatus = loadstatusid and load_regis.registrationfileid = load_data.registrationfileid and load_data.datafiletype = 'F' and load_regis.receiveddate between convert(datetime, '{0}', 101) and dateadd(day, 1, convert(datetime, '{1}')) and load_regis.groupid = {2} order by {3}, {4} {5}

# Monthly Data Submission Activity Report - CSV
admin-report.monthly-submission-all-csv.specific=and load_regis.groupid = {0}
admin-report.monthly-submission-all-csv.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.monthly-submission-all-csv=select '{5}' as "Report Date", '{6}' as "Requested By", datename(dd,'{0}')+' '+datename(mm,'{0}')+' '+datename(yyyy,'{0}')+' to '+datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}') as "Report Period", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", load_regis.controlfilename as "Control File", load_regis.period as "Period", dbo.convert_datetime(load_data.registereddate) as "Registered Date", dbo.convert_datetime(load_data.validateddate) as "Validation Start Date", dbo.convert_datetime(load_data.validatedfinishdate) as "Validation Finish Date", dbo.convert_datetime(load_data.postvalidateddate) as "Post Validation Start Date", dbo.convert_datetime(load_data.postvalidatedfinishdate) as "Post Validation Finish Date", dbo.convert_datetime(load_data.applydate) as "Apply Start Date", dbo.convert_datetime(load_data.applyfinishdate) as "Apply Finish Date", (select base_loadstatus.statusdesc from base_loadstatus (nolock) where base_loadstatus.loadstatusid = load_regis.processstatus) as "Status" from load_registrationfile as load_regis (nolock), load_registrationdata as load_data (nolock), spm_group (nolock) where load_regis.registrationfileid = load_data.registrationfileid and load_data.datafiletype = 'F' and load_regis.groupid = spm_group.groupid and load_data.registereddate >= convert(datetime, '{0}', 101) and load_data.registereddate < dateadd(day, 1, convert(datetime, '{1}')) {2} order by {7}, {3}, {4}

# Input File Process Summary Report
#admin-report.input-file-summary-groupid=select load_regis.receivedby as operator,  load_regis.registrationfileid as dataloadid, load_regis.period as period, cast(load_regis.period + (select case when spm_group.submission_day > 9 then cast(spm_group.submission_day as char(2)) when spm_group.submission_day <= 9 then '0'+cast(spm_group.submission_day as char(2)) end from spm_group spm_group (nolock) where load_regis.groupid = spm_group.groupid) as datetime) scheduledate, load_regis.receiveddate as receiveddate,  load_regis.processdate as dataloaddate, load_regis.controlfilename, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (select count(distinct(load_val.seqload)) from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid  and load_val.groupid = load_regis.groupid and load_val.tabletype is not null) as errorrecord, sum(load_regisdata.totalofapplyrecord) as applyrecord, (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, cast ((sum(load_regisdata.totalofapplyrecord) * 100) / sum(load_regisdata.totalofvalidaterecord) as numeric(9,2)) as percentapplyrecord from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid and load_regis.groupid = load_regisdata.groupid and load_regis.groupid = {0} and load_regis.period = {1} and load_regis.registrationfileid = {2} group by load_regis.receivedby, load_regis.registrationfileid, load_regis.period, load_regis.receiveddate,  load_regis.receiveddate, load_regis.processdate, load_regis.controlfilename, load_regis.threshold, load_regis.groupid order by {3} , {4}
#admin-report.input-file-summary-allgroup=select load_regis.receivedby as operator,  load_regis.registrationfileid as dataloadid, load_regis.period as period, cast(load_regis.period + (select case when spm_group.submission_day > 9 then cast(spm_group.submission_day as char(2)) when spm_group.submission_day <= 9 then '0'+cast(spm_group.submission_day as char(2)) end from spm_group spm_group (nolock) where load_regis.groupid = spm_group.groupid) as datetime) scheduledate, load_regis.receiveddate as receiveddate,  load_regis.processdate as dataloaddate, load_regis.controlfilename, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (select count(distinct(load_val.seqload)) from load_validation_log load_val (nolock) where load_val.registrationid = load_regis.registrationfileid  and load_val.groupid = load_regis.groupid and load_val.tabletype is not null) as errorrecord, sum(load_regisdata.totalofapplyrecord) as applyrecord, (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, cast ((sum(load_regisdata.totalofapplyrecord) * 100) / sum(load_regisdata.totalofvalidaterecord) as numeric(9,2)) as percentapplyrecord from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid and load_regis.groupid = load_regisdata.groupid and load_regis.groupid = {0} and load_regis.period = {1} group by load_regis.receivedby, load_regis.registrationfileid, load_regis.period, load_regis.receiveddate,  load_regis.receiveddate, load_regis.processdate, load_regis.controlfilename, load_regis.threshold, load_regis.groupid order by {2} , {3}
admin-report.input-file-summary-groupid=select load_regis.receivedby as operator,  load_regis.registrationfileid as dataloadid, load_regis.period as period, cast(load_regis.period + (select case when spm_group.submission_day > 9 then cast(spm_group.submission_day as char(2)) when spm_group.submission_day <= 9 then '0'+cast(spm_group.submission_day as char(2)) end from spm_group spm_group (nolock) where load_regis.groupid = spm_group.groupid) as datetime) scheduledate, load_regis.receiveddate as receiveddate,  load_regis.processdate as dataloaddate, load_regis.controlfilename, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (isnull(isnull(sum(load_regisdata.totalofvalidaterecord),0) - isnull(sum(load_regisdata.totalofapplyrecord),0),0)) as errorrecord, sum(load_regisdata.totalofapplyrecord) as applyrecord, (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, cast ((sum(load_regisdata.totalofapplyrecord) * 100) / sum(load_regisdata.totalofvalidaterecord) as numeric(9,2)) as percentapplyrecord from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid and load_regis.groupid = load_regisdata.groupid and load_regis.groupid = {0} and load_regis.period = {1} and load_regis.registrationfileid = {2} group by load_regis.receivedby, load_regis.registrationfileid, load_regis.period, load_regis.receiveddate,  load_regis.receiveddate, load_regis.processdate, load_regis.controlfilename, load_regis.threshold, load_regis.groupid order by {3} , {4}
admin-report.input-file-summary-allgroup=select load_regis.receivedby as operator,  load_regis.registrationfileid as dataloadid, load_regis.period as period, cast(load_regis.period + (select case when spm_group.submission_day > 9 then cast(spm_group.submission_day as char(2)) when spm_group.submission_day <= 9 then '0'+cast(spm_group.submission_day as char(2)) end from spm_group spm_group (nolock) where load_regis.groupid = spm_group.groupid) as datetime) scheduledate, load_regis.receiveddate as receiveddate,  load_regis.processdate as dataloaddate, load_regis.controlfilename, sum(load_regisdata.totalofvalidaterecord) as totalrecord,  (isnull(isnull(sum(load_regisdata.totalofvalidaterecord),0) - isnull(sum(load_regisdata.totalofapplyrecord),0),0)) as errorrecord, sum(load_regisdata.totalofapplyrecord) as applyrecord, (select spm_group.threshold from spm_group (nolock) where spm_group.groupid = load_regis.groupid) as validationthreshold, cast ((sum(load_regisdata.totalofapplyrecord) * 100) / sum(load_regisdata.totalofvalidaterecord) as numeric(9,2)) as percentapplyrecord from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid and load_regis.groupid = load_regisdata.groupid and load_regis.groupid = {0} and load_regis.period = {1} group by load_regis.receivedby, load_regis.registrationfileid, load_regis.period, load_regis.receiveddate,  load_regis.receiveddate, load_regis.processdate, load_regis.controlfilename, load_regis.threshold, load_regis.groupid order by {2} , {3}

# Full / Record Unload Report
admin-report.unload-report-file-all=select spm_group.group_name_en membername, prod_unload.registrationfileid, prod_unload.controlfilename, prod_unload.period, (select count(temp_unload.registrationfileid) from prod_unload_status temp_unload (nolock) where temp_unload.registrationfileid = prod_unload.registrationfileid and temp_unload.cbuid is not null and temp_unload.channel = 'f') noofrecord, prod_unload.unload_date, prod_unload.requested_by, (select case  when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0) then spm_user.userid  else  substring(spm_user.userid, 1,len(spm_user.userid)-(len(spm_user.uid)+1)) end  end as userid from spm_user u (nolock) where  u.uid = prod_unload.unload_by) as uid, prod_unload.reason from prod_unload_status prod_unload (nolock), spm_group (nolock) where prod_unload.groupid = spm_group.groupid and prod_unload.cbuid is null and prod_unload.channel = 'F' and prod_unload.groupid = {0} and prod_unload.unload_date between convert(datetime, '{1}', 101) and dateadd(day, 1, convert(datetime, '{2}', 101)) order by {3}, {4} {5}
admin-report.unload-report-record-all=select spm_group.group_name_en as membername, prod_unload.period, prod_unload.brc_no, prod_unload.controlfilename, prod_unload.ci_no, prod_unload.other_reg_no, prod_unload.place_of_reg, prod_unload.customer_no, prod_unload.unload_date as unload_date, prod_unload.requested_by, (select case  when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0) then spm_user.userid  else  substring(spm_user.userid, 1,len(spm_user.userid)-(len(spm_user.uid)+1)) end  end as userid from spm_user u (nolock) where u.uid = prod_unload.unload_by) as uid, prod_unload.reason from prod_unload_status prod_unload (nolock), spm_group (nolock) where prod_unload.groupid = spm_group.groupid and prod_unload.cbuid is not null and prod_unload.channel = 'r' and prod_unload.groupid = {0} and prod_unload.unload_date between convert(datetime, '{1}', 101) and dateadd(day, 1, convert(datetime, '{2}', 101)) order by {3}, {4} {5}

# Key Optonal Items Not Submitted Report
admim-report.key-optional-item-not-submit=select load_regis.receiveddate, load_regis.period, prod_demo.brc_no as hkbrc, prod_demo.ci_no as hkci, prod_demo.other_reg_no as otherregno, prod_demo.place_of_reg as placeofreg, prod_demo.customer_no as customerno, prod_credit.loc_branch_id as locationbranchid, prod_credit.acc_mnger_code as accountcode, case when (prod_demo.place_of_reg is null and prod_demo.other_reg_no is not null) and prod_demo.phone_no is null then 'Place of Registration/ Incorporation and Telephone' when prod_demo.place_of_reg is null and prod_demo.other_reg_no is not null then 'Place of Registration/ Incorporation'  when prod_demo.phone_no is null then 'Telephone' end as fieldsmissing from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock), prod_demographic prod_demo (nolock), prod_credit (nolock) where prod_demo.registrationdataid = load_regisdata.registrationdataid and load_regisdata.registrationfileid = load_regis.registrationfileid and prod_demo.cbuid = prod_credit.cbuid and prod_demo.groupid = prod_credit.groupid and (prod_demo.place_of_reg is null or prod_demo.phone_no is null) and load_regis.groupid = {0} and load_regis.receiveddate between convert(datetime, '{1}', 101) and dateadd(day, 1, convert(datetime, '{2}', 101)) order by {3}, {4} {5}, prod_demo.brc_no, prod_demo.ci_no

# Key Optonal Items Not Submitted Report - CSV
admim-report.key-optional-item-not-submit-csv.specific=and load_regis.groupid = {0}
admim-report.key-optional-item-not-submit-csv.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admim-report.key-optional-item-not-submit-csv=select '{5}' as "Report Date", '{6}' as "Requested By", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", datename(dd,load_regisdata.registereddate)+' '+datename(mm,load_regisdata.registereddate)+' '+datename(yyyy,load_regisdata.registereddate) as "Received Date", load_regis.period as "Period", prod_demo.brc_no as "HKBRC", prod_demo.ci_no as "HKCI", prod_demo.other_reg_no as "Other Registration / Incorporation Number", prod_demo.place_of_reg as "Place of Registration / Incorporation", prod_demo.customer_no as "Customer Number", prod_credit.loc_branch_id as "Location /Branch ID", prod_credit.acc_mnger_code as "Account Manager Code", case when (prod_demo.place_of_reg is null and prod_demo.other_reg_no is not null) and prod_demo.phone_no is null then 'Place of Registration/ Incorporation and Telephone' when prod_demo.place_of_reg is null and prod_demo.other_reg_no is not null then 'Place of Registration/ Incorporation' when prod_demo.phone_no is null then 'Telephone' end as "Fields Missing" from load_registrationfile load_regis (nolock),  load_registrationdata load_regisdata (nolock), history_demographic prod_demo (nolock), history_credit prod_credit (nolock), spm_group (nolock) where prod_demo.registrationdataid = load_regisdata.registrationdataid and load_regisdata.registrationfileid = load_regis.registrationfileid and prod_demo.cbuid = prod_credit.cbuid and prod_demo.groupid = prod_credit.groupid and prod_demo.period = prod_credit.period and ((prod_demo.other_reg_no is not null and prod_demo.place_of_reg is null) or prod_demo.phone_no is null) and load_regis.groupid = spm_group.groupid {0} and load_regisdata.period = '{8}' order by {7}, {3} , {4}, prod_demo.brc_no, prod_demo.ci_no

# Effective Revocation Confirmation Report
admin-report.effect-revocation-comfirm=select prod_demo.brc_no as hkbrc, prod_demo.ci_no as hkci, prod_demo.other_reg_no , prod_demo.place_of_reg, prod_demo.customer_no,(select prod_credit.loc_branch_id  from prod_credit (nolock) where prod_credit.cbuid = prod_demo.cbuid and prod_credit.groupid = prod_demo.groupid)  as locationbranchid,(select prod_credit.acc_mnger_code  from prod_credit	(nolock) where prod_credit.cbuid = prod_demo.cbuid and prod_credit.groupid = prod_demo.groupid) as accountcode, prod_demo_flag.revoc_noticed_date, prod_demo_flag.revoc_effect_date  from  prod_demographic prod_demo (nolock), prod_demographic_flag prod_demo_flag (nolock) where prod_demo.cbuid = prod_demo_flag.cbuid and prod_demo.groupid = prod_demo_flag.groupid  and prod_demo.groupid = {0}  and prod_demo_flag.revoc_effect_date between convert(datetime, '{1}', 101)  and dateadd(day, 1, convert(datetime, '{2}', 101)) order by {3} {4}

# Effective Revocation Confirmation Report - CSV
admin-report.effect-revocation-comfirm-csv.specific=and prod_demo_flag.groupid = {0}
admin-report.effect-revocation-comfirm-csv.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.effect-revocation-comfirm-csv=select distinct '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", prod_demo.brc_no as "HKBRC", prod_demo.ci_no as "HKCI", prod_demo.other_reg_no as "Other Registration / Incorporation Number", prod_demo.place_of_reg as "Place of Registration / Incorporation", prod_demo.customer_no as "Customer Number", (select prod_credit.loc_branch_id from history_credit prod_credit (nolock) where prod_credit.cbuid = prod_demo.cbuid and prod_credit.groupid = prod_demo.groupid and prod_credit.period = prod_demo.period) as "Location / Branch ID", (select prod_credit.acc_mnger_code from history_credit prod_credit (nolock) where prod_credit.cbuid = prod_demo.cbuid and prod_credit.groupid = prod_demo.groupid and prod_credit.period = prod_demo.period) as "Account Manager Code", convert(varchar,prod_demo_flag.revoc_noticed_date, 101) as "Revocation Notice Date", convert(varchar,prod_demo_flag.revoc_effect_date, 101) as "Revocation Effective Date" from (select distinct cbuid, groupid, period, revoc_noticed_date, revoc_effect_date from prod_demographic_flag (nolock) where revoc_effect_date is not null union select a.cbuid, a.groupid, max(a.period) as period ,(select max(b.revoc_noticed_date) from history_demographic_flag b (nolock) where a.cbuid = b.cbuid and a.groupid = b.groupid and b.period = max(a.period)) as revoc_noticed_date ,(select max(b.revoc_effect_date) from history_demographic_flag b (nolock)  where a.cbuid = b.cbuid and a.groupid = b.groupid and b.period = max(a.period)) as revoc_effect_date from history_demographic_flag a (nolock) where a.writeoffamount = -1 and a.recoveryamount = -1 and a.revoc_effect_date is not null group by a.cbuid, a.groupid, a.updateddate) as prod_demo_flag left outer join history_demographic prod_demo (nolock) on prod_demo_flag.cbuid = prod_demo.cbuid and prod_demo_flag.groupid = prod_demo.groupid and prod_demo_flag.period = prod_demo.period inner join spm_group (nolock) on prod_demo.groupid = spm_group.groupid where prod_demo_flag.period >= substring(convert(varchar,dateadd(year,-5,getdate()),112),1,6) {0} and prod_demo_flag.revoc_effect_date >= convert(datetime, '{1}', 101) and prod_demo_flag.revoc_effect_date < dateadd(day, 1, convert(datetime, '{2}', 101)) order by {6}, {3}

# Daily DUNS Numbering Error Report
admin-report.duns-numbering-master=select spm_group.aicode as membercode, spm_group.groupid, spm_group.group_name_en as membername, load_regis.controlfilename, load_regis.receiveddate, load_regisdata.postvalidatedfinishdate as postvaidationdate, load_regis.registrationfileid from load_registrationfile load_regis (nolock), load_registrationdata load_regisdata (nolock), spm_group (nolock) where load_regis.registrationfileid = load_regisdata.registrationfileid and load_regis.groupid = load_regisdata.groupid and load_regisdata.datafiletype = 'D' and load_regis.groupid = spm_group.groupid and load_regis.groupid = {0} and load_regis.period = {1}
admin-report.duns-numbering-detail=select load_log.columndata as dunsno, (select spm_group.aicode from spm_group (nolock) where spm_group.groupid = load_log.groupid) as contributorid, load_log.registrationid, load_log.seqload as systemassingedcode, load_log.brc_no as hkbrc, load_log.ci_no as hkci, load_log.other_reg_no, load_log.place_of_reg, load_log.errordesc from load_validation_log as load_log (nolock) where load_log.tabletype = 'U' and load_log.groupid = {0} and load_log.period = {1} and load_log.registrationid = {2} order by load_log.columndata, load_log.registrationid, load_log.seqload

#================================ MIS ====================================

# Member Inquiry Report
admin-report.member-inquiry.summary=select detail.title, sum(detail.currentperiod) as currentperiod, sum(detail.pastoneperiod) as pastoneperiod, sum(detail.pasttwoperiod) as pasttwoperiod, case when detail.title = 'Total Users' then sum(detail.currentperiod) else sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod) end as total, case when detail.title = 'Total Users' then null else cast ((sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod)) / 3.00 as numeric(15,2)) end as average from (select 'Total Active Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pasttwoperiod from spm_group (nolock) where spm_group.groupid = {1} union select 'Inquiry Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pasttwoperiod from spm_group (nolock) where spm_group.groupid = {1} union select 'Total Users' as title, (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01'))) and spm_user.createddate < dateadd(month,1,'{0}'+'01')) as currentperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime))) and spm_user.createddate < cast('{0}'+'01' as datetime)) as pastoneperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01'))) and spm_user.createddate < dateadd(month,-1,'{0}'+'01')) as pasttwoperiod from spm_group (nolock) where spm_group.groupid = {1} ) detail group by detail.title order by detail.title desc
admin-report.member-inquiry.inquiry=select data.groupid as groupaiid, data.userid, data.user_name_en, sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0)) as pasttwoperiod, sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0)) as pastoneperiod, sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) as currentperiod, sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0))+ sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0))+ sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) as total	, cast ((sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0))+ sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0))+ sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) ) / 3.00 as numeric(15,2)) average, data.uid from (select spm_group.groupid ,case  when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0) then spm_user.userid  else  substring(spm_user.userid, 1,len(spm_user.userid)-(len(spm_user.uid)+1)) end  end as userid ,spm_user.user_name_en, spm_group.monthly_plan , spm_group.disabled , spm_group.deleted , trans.uid , spm_group.aiflag , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoring , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiry , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoringP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiryP1 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoringP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiryP2 from  spm_transaction trans (nolock) inner join mal_productdeliver mal_prod (nolock) on mal_prod.transactionid=trans.transactionid inner join spm_user (nolock) on spm_user.uid=trans.uid  inner join spm_group (nolock) on spm_group.groupid=spm_user.groupccraid left outer join spm_expense ex(nolock)on ex.expenseid=mal_prod.expenseid left outer join (select transactionid,product_type from prod_register (nolock)) regis on mal_prod.transactionid = regis.transactionid left outer join (select mal1.transactionid,1 as flag from mal_productdeliver mal1 (nolock) where mal1.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where (a.expenseid = mal1.expenseid) order by a.transactionid desc) or mal1.expenseid is null) tranid on tranid.transactionid=mal_prod.transactionid where trans.objectid=47 and  trans.createddate  between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) data where 1=1 and data.groupid={1} group by data.groupid,data.uid, data.userid, data.user_name_en order by {2}, {3}
#admin-report.member-inquiry.inquiry=select data.userid, data.user_name_en, sum(isnull(data.pasttwoperiod,0)) as pasttwoperiod, sum(isnull(data.pastoneperiod,0)) as pastoneperiod, sum(isnull(data.currentperiod,0)) as currentperiod, sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0)) as total, cast ((sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0))) / 3.00 as numeric(15,2)) average from (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid,  spm_user.user_name_en, case when spm_expense.requesttime between cast('{0}'+'01' as datetime)  and dateadd(month,1,'{0}'+'01') then 1 end as currentperiod, case when spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime) then 1 end as pastoneperiod, case when spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01') then 1 end as pasttwoperiod from spm_user (nolock), spm_expense (nolock) where spm_user.uid = spm_expense.uid and spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01') and spm_user.groupaiid = {1}) data group by data.userid, data.user_name_en order by {2}, {3}
admin-report.member-inquiry.active-user=select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid, spm_user.user_name_en from spm_user (nolock) left outer join (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) spm_session on spm_user.uid = spm_session.uid where spm_user.disabled = 0 and spm_user.deleted = 0 and spm_session.uid is null and spm_user.groupaiid = {1} order by {2}
#admin-report.member-inquiry.active-user=select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, spm_user.user_name_en from spm_user (nolock) left outer join (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) spm_session on spm_user.uid = spm_session.uid where spm_user.disabled = 0 and spm_user.deleted = 0 and spm_session.uid is null and spm_user.groupaiid = {1} order by {2}

# Member Inquiry Report - CSV
admin-report.member-inquiry.summary.csv.specific-allmember=where spm_group.aiflag = 1
admin-report.member-inquiry.inquiry.csv.specific-allmember=and data.aiflag = 1
admin-report.member-inquiry.active-user.csv.specific-allmember=and spm_user.groupaiid <> 1

admin-report.member-inquiry.summary.csv.specific=where spm_group.groupid = {0}
admin-report.member-inquiry.summary.csv.specific.monthlyplan=where spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.member-inquiry.inquiry.csv.specific=and data.groupid = {0}
admin-report.member-inquiry.inquiry.csv.specific.monthlyplan=and data.monthly_plan in ({0}) and data.disabled = 0 and data.deleted = 0
admin-report.member-inquiry.active-user.csv.specific=and spm_user.groupaiid = {0}
admin-report.member-inquiry.active-user.csv.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0

#admin-report.member-inquiry.summary.csv=select '{2}' as "Report Date", '{3}' as "Requested By", detail.aicode as "Member Code", (select spm_group.group_name_en from spm_group where spm_group.groupid is not null and spm_group.groupid = detail.groupid) as "Member Name", detail.title as "Type", sum(detail.pasttwoperiod) as "{4}", sum(detail.pastoneperiod) as "{5}", sum(detail.currentperiod) as "{6}", case when detail.title = 'Total Users' then sum(detail.currentperiod) else sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod) end as "Total", case when detail.title = 'Total Users' then null else  cast ((sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod)) / 3.00 as numeric(15,2)) end as "AVG" from(select spm_group.groupid, spm_group.aicode, 'Total Active Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Inquiry Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Total Users' as title, (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01'))) and spm_user.createddate < dateadd(month,1,'{0}'+'01')) as currentperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime))) and spm_user.createddate < cast('{0}'+'01' as datetime)) as pastoneperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-2,'{0}'+'01') and cast('{0}'+'01' as datetime))) and spm_user.createddate < dateadd(month,-1,'{0}'+'01')) as pasttwoperiod from spm_group (nolock) {1} ) detail group by detail.groupid, detail.aicode, detail.title order by {7}, detail.title desc
#admin-report.member-inquiry.summary.csv=select '{2}' as "Report Date", '{3}' as "Requested By", detail.aicode as "Member Code", (select spm_group.group_name_en from spm_group where spm_group.groupid is not null and spm_group.groupid = detail.groupid) as "Member Name", detail.title as "Type", sum(detail.pasttwoperiod) as "{4}", sum(detail.pastoneperiod) as "{5}", sum(detail.currentperiod) as "{6}", case when detail.title = 'Total Users' then sum(detail.currentperiod) else sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod) end as "Total", case when detail.title = 'Total Users' then null else  cast ((sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod)) / 3.00 as numeric(15,2)) end as "AVG" from(select spm_group.groupid, spm_group.aicode, 'Total Active Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Inquiry Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Total Users' as title, (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate >= cast('{0}'+'01' as datetime))) and spm_user.createddate < dateadd(month,1,'{0}'+'01')) 	as currentperiod , 	(select count(spm_user.uid) from spm_user (nolock) 	where spm_user.groupaiid = spm_group.groupid 	and (spm_user.disabled = 0 and spm_user.deleted = 0 	or ((spm_user.disabled = 1 or spm_user.deleted = 1)         and spm_user.updateddate >= dateadd(month,-1,'{0}'+'01')))        and spm_user.createddate < cast('{0}'+'01' as datetime)) 	as pastoneperiod , 	(select count(spm_user.uid) from spm_user (nolock) 	where spm_user.groupaiid = spm_group.groupid 	and (spm_user.disabled = 0 and spm_user.deleted = 0 	or ((spm_user.disabled = 1 or spm_user.deleted = 1)         and spm_user.updateddate >= dateadd(month,-2,'{0}'+'01')))        and spm_user.createddate < dateadd(month,-1,'{0}'+'01'))	as pasttwoperiod from spm_group (nolock)  {1} ) detail group by detail.groupid, detail.aicode, detail.title order by {7}, detail.title desc
admin-report.member-inquiry.summary.csv=select '{2}' as "Report Date", '{3}' as "Requested By", '{8}' as "Report Period", detail.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock) where spm_group.groupid is not null and spm_group.groupid = detail.groupid) as "Member Name", detail.title as "Type", sum(detail.pasttwoperiod) as "{4}", sum(detail.pastoneperiod) as "{5}", sum(detail.currentperiod) as "{6}", case when detail.title = 'Total Users' then sum(detail.currentperiod) else sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod) end as "Total", case when detail.title = 'Total Users' then null else  cast ((sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod)) / 3.00 as numeric(15,2)) end as "AVG." from (select spm_group.groupid, spm_group.aicode, 'Total Active Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_session where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_session.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Inquiry Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_expense where spm_user.groupaiid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Total Users' as title, (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.deleted = 0 or (spm_user.deleted = 1 and spm_user.updateddate >= cast('{0}'+'01' as datetime))) and spm_user.createddate < dateadd(month,1,'{0}'+'01')) as currentperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.deleted = 0 or (spm_user.deleted = 1 and spm_user.updateddate >= dateadd(month,-1,'{0}'+'01'))) and spm_user.createddate < cast('{0}'+'01' as datetime)) as pastoneperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupaiid = spm_group.groupid and (spm_user.deleted = 0 or (spm_user.deleted = 1 and spm_user.updateddate >= dateadd(month,-2,'{0}'+'01'))) and spm_user.createddate < dateadd(month,-1,'{0}'+'01')) as pasttwoperiod from spm_group (nolock)  {1} ) detail group by detail.groupid, detail.aicode, detail.title order by {7}, detail.title desc
#admin-report.member-inquiry.inquiry.csv=select '{2}' as "Report Date", '{3}' as "Requested By", '{10}' as "Report Period", (select spm_group.aicode from spm_group (nolock) where spm_group.groupid = data.groupaiid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock) where spm_group.groupid = data.groupaiid) as "Member Name", data.userid as "User ID", data.user_name_en as "User Name", sum(isnull(data.pasttwoperiod,0)) as "{6}", sum(isnull(data.pastoneperiod,0)) as "{7}", sum(isnull(data.currentperiod,0)) as "{8}", sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0)) as "Total", cast ((sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0))) / 3.00 as numeric(15,2)) as "AVG." , data.uid as uid from (select spm_user.groupaiid, spm_user.uid, case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid, spm_user.user_name_en, case when spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01') then 1 end as currentperiod, case when spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime) then 1 end as pastoneperiod, case when spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01') then 1 end as pasttwoperiod from spm_user (nolock), spm_expense (nolock), spm_group (nolock) where spm_user.uid = spm_expense.uid and spm_user.groupaiid = spm_group.groupid and spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01') {1} ) data group by data.groupaiid, data.uid, data.userid, data.user_name_en order by {9}, {4}, {5}
admin-report.member-inquiry.inquiry.csv=select '{2}' as "Report Date", '{3}' as "Requested By", '{10}' as "Report Period", data.aicode as "Member Code", data.group_name_en as "Member Name", data.userid as "User ID", data.user_name_en as "User Name", sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0)) as "{6}", sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0)) as "{7}", sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) as "{8}", sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0))+ sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0))+ sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) as "Total", cast ((sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0))+ sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0))+ sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) ) / 3.00 as numeric(15,2)) as "AVG.", data.uid as uid from (select spm_group.groupid ,case  when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0) then spm_user.userid  else  substring(spm_user.userid, 1,len(spm_user.userid)-(len(spm_user.uid)+1)) end  end as userid,spm_user.user_name_en, spm_group.monthly_plan , spm_group.disabled , spm_group.deleted , trans.uid , spm_group.aiflag ,spm_group.aicode, spm_group.group_name_en , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoring , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiry , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoringP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiryP1 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoringP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiryP2 from  spm_transaction trans (nolock) inner join mal_productdeliver mal_prod (nolock) on mal_prod.transactionid=trans.transactionid inner join spm_user (nolock) on spm_user.uid=trans.uid  inner join spm_group (nolock) on spm_group.groupid=spm_user.groupaiid left outer join spm_expense ex(nolock)on ex.expenseid=mal_prod.expenseid left outer join (select transactionid,product_type from prod_register (nolock)) regis on mal_prod.transactionid = regis.transactionid left outer join (select mal1.transactionid,1 as flag from mal_productdeliver mal1 (nolock) where mal1.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where (a.expenseid = mal1.expenseid) order by a.transactionid desc) or mal1.expenseid is null) tranid 	on tranid.transactionid=mal_prod.transactionid where trans.objectid=47 and  trans.createddate  between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) data where 1=1 {1} group by data.groupid,data.uid, data.userid, data.user_name_en,data.aicode,data.group_name_en order by {9},{4},{5}
#admin-report.member-inquiry.inquiry.csv=select '{2}' as "Report Date", '{3}' as "Requested By", '{10}' as "Report Period", (select spm_group.aicode from spm_group (nolock) where spm_group.groupid = data.groupaiid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock) where spm_group.groupid = data.groupaiid) as "Member Name", data.userid as "User ID", data.user_name_en as "User Name", sum(isnull(data.pasttwoperiod,0)) as "{6}", sum(isnull(data.pastoneperiod,0)) as "{7}", sum(isnull(data.currentperiod,0)) as "{8}", sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0)) as "Total", cast ((sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0))) / 3.00 as numeric(15,2)) as "AVG." from (select spm_user.groupaiid, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, spm_user.user_name_en, case when spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01') then 1 end as currentperiod, case when spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime) then 1 end as pastoneperiod, case when spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01') then 1 end as pasttwoperiod from spm_user (nolock), spm_expense (nolock), spm_group (nolock) where spm_user.uid = spm_expense.uid and spm_user.groupaiid = spm_group.groupid and spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01') {1} ) data group by data.groupaiid, data.userid, data.user_name_en order by {9}, {4}, {5}
admin-report.member-inquiry.active-user.csv=select '{2}' as "Report Date", '{3}' as "Requested By", '{6}' as "Report Period", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as "User ID",  spm_user.user_name_en as "User Name" from spm_user (nolock) left outer join (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) spm_session on spm_user.uid = spm_session.uid inner join spm_group (nolock) on spm_user.groupaiid = spm_group.groupid where spm_user.disabled = 0 and spm_user.deleted = 0 and spm_session.uid is null {1} and spm_user.createdDate < dateadd(month,1,'{0}'+'01') order by {5}, {4}
#admin-report.member-inquiry.active-user.csv=select '{2}' as "Report Date", '{3}' as "Requested By", '{6}' as "Report Period", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as "User ID",  spm_user.user_name_en as "User Name" from spm_user (nolock) left outer join (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) spm_session on spm_user.uid = spm_session.uid inner join spm_group on spm_user.groupaiid = spm_group.groupid where spm_user.disabled = 0 and spm_user.deleted = 0 and spm_session.uid is null {1} order by {5}, {4}

admin-report.member-inquiry.summary.csv.specific-ccra-allmember=where (spm_group.parentgroupid = 1 or spm_group.parentgroupid is null)
admin-report.member-inquiry.inquiry.csv.specific-ccra-allmember=and data.groupaiid = 1
admin-report.member-inquiry.active-user.csv.specific-ccra-allmember=and spm_user.groupaiid = 1

admin-report.member-inquiry.summary.csv.specific-ccra=where spm_group.groupid = {0}
admin-report.member-inquiry.summary.csv.specific-ccra.monthlyplan=where spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.member-inquiry.inquiry.csv.specific-ccra=and data.groupid = {0}
admin-report.member-inquiry.inquiry.csv.specific-ccra.monthlyplan=and data.monthly_plan in ({0}) and data.disabled = 0 and data.deleted = 0
admin-report.member-inquiry.active-user.csv.specific-ccra=and spm_user.groupccraid = {0}
admin-report.member-inquiry.active-user.csv.specific-ccra.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0

#admin-report.member-inquiry.summary.csv-ccra=select '{2}' as "Report Date", '{3}' as "Requested By", detail.aicode as "Member Code", (select spm_group.group_name_en from spm_group where spm_group.groupid is not null and spm_group.groupid = detail.groupid) as "Member Name", detail.title as "Type", sum(detail.pasttwoperiod) as "{4}", sum(detail.pastoneperiod) as "{5}", sum(detail.currentperiod) as "{6}", case when detail.title = 'Total Users' then sum(detail.currentperiod) else sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod) end as "Total", case when detail.title = 'Total Users' then null else  cast ((sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod)) / 3.00 as numeric(15,2)) end as "AVG" from(select spm_group.groupid, spm_group.aicode, 'Total Active Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Inquiry Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Total Users' as title, (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupccraid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01'))) and spm_user.createddate < dateadd(month,1,'{0}'+'01')) as currentperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupccraid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime))) and spm_user.createddate < cast('{0}'+'01' as datetime)) as pastoneperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupccraid = spm_group.groupid and (spm_user.disabled = 0 and spm_user.deleted = 0 or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-2,'{0}'+'01') and cast('{0}'+'01' as datetime))) and spm_user.createddate < dateadd(month,-1,'{0}'+'01')) as pasttwoperiod from spm_group (nolock) {1} ) detail group by detail.groupid, detail.aicode, detail.title order by {7}, detail.title desc
#admin-report.member-inquiry.summary.csv-ccra=select '{2}' as "Report Date", '{3}' as "Requested By", detail.aicode as "Member Code", (select spm_group.group_name_en from spm_group where spm_group.groupid is not null and spm_group.groupid = detail.groupid) as "Member Name", detail.title as "Type", sum(detail.pasttwoperiod) as "{4}", sum(detail.pastoneperiod) as "{5}", sum(detail.currentperiod) as "{6}", case when detail.title = 'Total Users' then sum(detail.currentperiod) else sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod) end as "Total", case when detail.title = 'Total Users' then null else  cast ((sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod)) / 3.00 as numeric(15,2)) end as "AVG" from(select spm_group.groupid, spm_group.aicode, 'Total Active Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Inquiry Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Total Users' as title, 	(select count(spm_user.uid) from spm_user (nolock) 	where spm_user.groupccraid = spm_group.groupid  	and (spm_user.disabled = 0 and spm_user.deleted = 0 	or ((spm_user.disabled = 1 or spm_user.deleted = 1)         and spm_user.updateddate >= cast('{0}'+'01' as datetime)))	and spm_user.createddate < dateadd(month,1,'{0}'+'01')) 	as currentperiod , 	(select count(spm_user.uid) from spm_user (nolock) 	where spm_user.groupccraid = spm_group.groupid 	and (spm_user.disabled = 0 and spm_user.deleted = 0 	or ((spm_user.disabled = 1 or spm_user.deleted = 1)         and spm_user.updateddate >= dateadd(month,-1,'{0}'+'01')))        and spm_user.createddate < cast('{0}'+'01' as datetime)) 	as pastoneperiod , 	(select count(spm_user.uid) from spm_user (nolock) 	where spm_user.groupccraid = spm_group.groupid 	and (spm_user.disabled = 0 and spm_user.deleted = 0 	or ((spm_user.disabled = 1 or spm_user.deleted = 1)         and spm_user.updateddate >= dateadd(month,-2,'{0}'+'01')))        and spm_user.createddate < dateadd(month,-1,'{0}'+'01'))	as pasttwoperiod from spm_group (nolock)  {1} ) detail group by detail.groupid, detail.aicode, detail.title order by {7}, detail.title desc
admin-report.member-inquiry.summary.csv-ccra=select '{2}' as "Report Date", '{3}' as "Requested By", '{8}' as "Report Period", detail.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock) where spm_group.groupid is not null and spm_group.groupid = detail.groupid) as "Member Name", detail.title as "Type", sum(detail.pasttwoperiod) as "{4}", sum(detail.pastoneperiod) as "{5}", sum(detail.currentperiod) as "{6}", case when detail.title = 'Total Users' then sum(detail.currentperiod) else sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod) end as "Total", case when detail.title = 'Total Users' then null else  cast ((sum(detail.currentperiod)+sum(detail.pastoneperiod)+sum(detail.pasttwoperiod)) / 3.00 as numeric(15,2)) end as "AVG." from (select spm_group.groupid, spm_group.aicode, 'Total Active Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_session where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_session.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Inquiry Users' as title, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as currentperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pastoneperiod, (select count(spm_user.uid) from spm_user (nolock), (select distinct uid from spm_expense (nolock) where spm_expense.productusage <= 56 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) spm_expense where spm_user.groupccraid = spm_group.groupid and spm_user.uid = spm_expense.uid) as pasttwoperiod from spm_group (nolock) {1} union select spm_group.groupid, spm_group.aicode, 'Total Users' as title, (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupccraid = spm_group.groupid and (spm_user.deleted = 0 or (spm_user.deleted = 1 and spm_user.updateddate >= cast('{0}'+'01' as datetime))) and spm_user.createddate < dateadd(month,1,'{0}'+'01')) as currentperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupccraid = spm_group.groupid 	and (spm_user.deleted = 0 or (spm_user.deleted = 1 and spm_user.updateddate >= dateadd(month,-1,'{0}'+'01'))) and spm_user.createddate < cast('{0}'+'01' as datetime)) as pastoneperiod , (select count(spm_user.uid) from spm_user (nolock) where spm_user.groupccraid = spm_group.groupid 	and (spm_user.deleted = 0 or (spm_user.deleted = 1 and spm_user.updateddate >= dateadd(month,-2,'{0}'+'01'))) and spm_user.createddate < dateadd(month,-1,'{0}'+'01')) as pasttwoperiod from spm_group (nolock)  {1} ) detail group by detail.groupid, detail.aicode, detail.title order by {7}, detail.title desc
admin-report.member-inquiry.inquiry.csv-ccra=select '{2}' as "Report Date", '{3}' as "Requested By", '{10}' as "Report Period", data.aicode as "Member Code", data.group_name_en as "Member Name", data.userid as "User ID", data.user_name_en as "User Name", sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0)) as "{6}", sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0)) as "{7}", sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) as "{8}", sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0))+ sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0))+ sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) as "Total", cast ((sum(isnull(data.nomatchreportP2,0))+sum(isnull(data.basicreportP2,0))+sum(isnull(data.chinesereportP2,0))+sum(isnull(data.regis_monitoringP2,0))+sum(isnull(data.regis_enquiryP2,0))+ sum(isnull(data.nomatchreportP1,0))+sum(isnull(data.basicreportP1,0))+sum(isnull(data.chinesereportP1,0))+sum(isnull(data.regis_monitoringP1,0))+sum(isnull(data.regis_enquiryP1,0))+ sum(isnull(data.nomatchreport,0))+sum(isnull(data.basicreport,0))+sum(isnull(data.chinesereport,0))+sum(isnull(data.regis_monitoring,0))+sum(isnull(data.regis_enquiry,0)) ) / 3.00 as numeric(15,2)) as "AVG.", data.uid as uid from (select spm_group.groupid ,case  when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0) then spm_user.userid  else  substring(spm_user.userid, 1,len(spm_user.userid)-(len(spm_user.uid)+1)) end  end as userid,spm_user.user_name_en, spm_group.monthly_plan , spm_group.disabled , spm_group.deleted , trans.uid , spm_group.aiflag ,spm_group.aicode, spm_group.group_name_en ,spm_user.groupaiid, case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereport , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoring , case 	when (trans.createddate between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01')) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiry , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereportP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoringP1 , case 	when (trans.createddate between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime)) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiryP1 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereportP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(regis.product_type,0)=54 then 1 else 0 end as regis_monitoringP2 , case 	when (trans.createddate between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01')) and isnull(regis.product_type,0)=56 then 1 else 0 end as regis_enquiryP2 from  spm_transaction trans (nolock) inner join mal_productdeliver mal_prod (nolock) on mal_prod.transactionid=trans.transactionid inner join spm_user (nolock) on spm_user.uid=trans.uid  inner join spm_group (nolock) on spm_group.groupid=spm_user.groupccraid left outer join spm_expense ex(nolock)on ex.expenseid=mal_prod.expenseid left outer join (select transactionid,product_type from prod_register (nolock)) regis on mal_prod.transactionid = regis.transactionid left outer join (select mal1.transactionid,1 as flag from mal_productdeliver mal1 (nolock) where mal1.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where (a.expenseid = mal1.expenseid) order by a.transactionid desc) or mal1.expenseid is null) tranid 	on tranid.transactionid=mal_prod.transactionid where trans.objectid=47 and  trans.createddate  between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) data where 1=1 {1} group by data.groupid,data.uid, data.userid, data.user_name_en,data.aicode,data.group_name_en order by {9},{4},{5}
#admin-report.member-inquiry.inquiry.csv-ccra=select '{2}' as "Report Date", '{3}' as "Requested By", '{10}' as "Report Period", (select spm_group.aicode from spm_group (nolock) where spm_group.groupid = data.groupccraid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock) where spm_group.groupid = data.groupccraid) as "Member Name", data.userid as "User ID", data.user_name_en as "User Name", sum(isnull(data.pasttwoperiod,0)) as "{6}", sum(isnull(data.pastoneperiod,0)) as "{7}", sum(isnull(data.currentperiod,0)) as "{8}", sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0)) as "Total", cast ((sum(isnull(data.pasttwoperiod,0))+sum(isnull(data.pastoneperiod,0))+sum(isnull(data.currentperiod,0))) / 3.00 as numeric(15,2)) as "AVG." from (select spm_user.groupccraid, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, spm_user.user_name_en, case when spm_expense.requesttime between cast('{0}'+'01' as datetime) and dateadd(month,1,'{0}'+'01') then 1 end as currentperiod, case when spm_expense.requesttime between dateadd(month,-1,'{0}'+'01') and cast('{0}'+'01' as datetime) then 1 end as pastoneperiod, case when spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,-1,'{0}'+'01') then 1 end as pasttwoperiod from spm_user (nolock), spm_expense (nolock), spm_group (nolock) where spm_user.uid = spm_expense.uid and spm_user.groupccraid = spm_group.groupid and spm_expense.productusage <= 51 and spm_expense.requesttime between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01') {1} ) data group by data.groupccraid, data.userid, data.user_name_en order by {9}, {4}, {5}
admin-report.member-inquiry.active-user.csv-ccra=select '{2}' as "Report Date", '{3}' as "Requested By", '{6}' as "Report Period", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as "User ID",  spm_user.user_name_en as "User Name" from spm_user (nolock) left outer join (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) spm_session on spm_user.uid = spm_session.uid inner join spm_group (nolock) on spm_user.groupccraid = spm_group.groupid where spm_user.disabled = 0 and spm_user.deleted = 0 and spm_session.uid is null {1} order by {5}, {4}
#admin-report.member-inquiry.active-user.csv-ccra=select '{2}' as "Report Date", '{3}' as "Requested By", '{6}' as "Report Period", spm_group.aicode as "Member Code", spm_group.group_name_en as "Member Name", case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as "User ID",  spm_user.user_name_en as "User Name" from spm_user (nolock) left outer join (select distinct uid from spm_session (nolock) where spm_session.logindate between dateadd(month,-2,'{0}'+'01') and dateadd(month,1,'{0}'+'01')) spm_session on spm_user.uid = spm_session.uid inner join spm_group on spm_user.groupccraid = spm_group.groupid where spm_user.disabled = 0 and spm_user.deleted = 0 and spm_session.uid is null {1} order by {5}, {4}


# Inquiry Analysis Report
admin-report.inquiry-analysis.total=select  sum(inquiry.noofsearch) as totalofsearch, sum(isnull(inquiry.basicreport,0))+sum(isnull(inquiry.chinesereport,0))+sum(isnull(inquiry.nomatchreport,0))+ sum(isnull(inquiry.regis_monitoring,0))+sum(isnull(inquiry.regis_enquiry,0)) as totaloforder from(select trans.uid,trans.createddate		, case 	when trans.objectid = 47 then 1 end as noofsearch , case when isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreport , case 	when isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreport , case	when isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereport , case when isnull(regis.product_type,0)=54 then regis.cnt else 0 end as regis_monitoring , case when isnull(regis.product_type,0)=56 then regis.cnt else 0 end as regis_enquiry from  spm_transaction trans (nolock)inner join mal_productdeliver mal_prod (nolock) on mal_prod.transactionid=trans.transactionid inner join spm_user (nolock)on spm_user.uid=trans.uid inner join  spm_group (nolock) on spm_group.groupid=spm_user.groupccraid left outer join spm_expense ex(nolock)on ex.expenseid=mal_prod.expenseid left outer join (select transactionid,product_type,count(transactionid) as cnt from prod_register (nolock) group by transactionid,product_type) regis on mal_prod.transactionid = regis.transactionid left outer join (select mal1.transactionid,1 as flag from mal_productdeliver mal1 (nolock) where mal1.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where (a.expenseid = mal1.expenseid) order by a.transactionid desc) or mal1.expenseid is null) tranid on tranid.transactionid=mal_prod.transactionid	where trans.objectid=47 and (isnull(mal_prod.hkbrc,'') <> '' or isnull(mal_prod.hkci,'') <> '' or isnull(mal_prod.other_reg_no,'') <> '' or isnull(mal_prod.namesearch,'') <> '') ) inquiry where inquiry.uid={0} and inquiry.createddate >= convert(datetime, '{1}', 101) and inquiry.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) 
admin-report.inquiry-analysis.summary=select case when master.type = 1 then 'Online Inquiry (Search by HKBRC)' when master.type = 2 then 'Online Inquiry (Search by HKCI)' when master.type = 3 then 'Online Inquiry (Search by Other Registration)' when master.type = 4 then 'Online Inquiry (Name Search)' when master.type = 5 then 'Batch Request (Search by HKBRC)' when master.type = 6 then 'Batch Request (Search by HKCI)' when master.type = 7 then 'Batch Request (Search by Other Registration)' end as type, sum(master.noofsearch) as noofsearch, sum(master.nooforder) as nooforder, sum(master.basicreport) as basicreport, sum(master.chinesereport) as chinesereport, sum(master.nomatchreport) as nomatchreport, sum(master.monitoringreport) as  monitoringreport,  sum(master.enquiryreport) as enquiryreport from (select inquiry.type, sum(inquiry.noofsearch) as noofsearch, sum(isnull(inquiry.basicreport,0))+sum(isnull(inquiry.chinesereport,0))+sum(isnull(inquiry.nomatchreport,0))+ sum(isnull(inquiry.regis_monitoring,0))+sum(isnull(inquiry.regis_enquiry,0)) as nooforder,  sum(inquiry.basicreport) as basicreport, sum(inquiry.chinesereport) as chinesereport, sum(inquiry.nomatchreport) as nomatchreport, sum(inquiry.regis_monitoring) as monitoringreport, sum(inquiry.regis_enquiry) as enquiryreport from (select spm_group.groupid , spm_group.monthly_plan , spm_group.disabled , spm_group.deleted , trans.uid , trans.transactionid , spm_group.aiflag,trans.createddate , case when isnull(mal_prod.hkbrc,'') <> '' and mal_prod.requesttype = 'O' then 1  when isnull(mal_prod.hkci,'') <> '' and mal_prod.requesttype = 'O' then 2  when isnull(mal_prod.other_reg_no,'') <> '' and mal_prod.requesttype = 'O' then 3  when isnull(mal_prod.namesearch,'') <> '' then 4   when isnull(mal_prod.hkbrc,'') <> '' and mal_prod.requesttype = 'B' then 5   when isnull(mal_prod.hkci,'') <> '' and mal_prod.requesttype = 'B' then 6  when isnull(mal_prod.other_reg_no,'') <> '' and mal_prod.requesttype = 'B' then 7 end as type , case when trans.objectid = 47 then 1 end as noofsearch , case 	when isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreport , case 	when isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreport , case	when isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereport , case when isnull(regis.product_type,0)=54 then regis.cnt else 0 end as regis_monitoring , case when isnull(regis.product_type,0)=56 then regis.cnt else 0 end as regis_enquiry from  spm_transaction trans (nolock) inner join mal_productdeliver mal_prod (nolock) on mal_prod.transactionid=trans.transactionid inner join spm_user (nolock) on spm_user.uid=trans.uid  inner join  spm_group (nolock) on spm_group.groupid=spm_user.groupccraid left outer join spm_expense ex(nolock)on ex.expenseid=mal_prod.expenseid left outer join (select transactionid,product_type,count(transactionid) as cnt from prod_register (nolock) group by transactionid,product_type) regis on mal_prod.transactionid = regis.transactionid left outer join (select mal1.transactionid,1 as flag from mal_productdeliver mal1 (nolock) where mal1.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where (a.expenseid = mal1.expenseid) order by a.transactionid desc) or mal1.expenseid is null) tranid on tranid.transactionid=mal_prod.transactionid where trans.objectid=47 ) inquiry where inquiry.uid = {0} and inquiry.createddate between convert(datetime, '{1}', 101) and dateadd(day, 1, convert(datetime, '{2}', 101)) group by inquiry.type union select 1 type, 0, 0,  0, 0, 0, 0, 0 union select 2 type, 0, 0,  0, 0, 0, 0, 0 union select 3 type, 0, 0,  0, 0, 0, 0, 0 union select 4 type, 0, 0,  0, 0, 0, 0, 0 union select 5 type, 0, 0,  0, 0, 0, 0, 0 union select 6 type, 0, 0,  0, 0, 0, 0, 0 union select 7 type, 0, 0,  0, 0, 0, 0, 0 ) master group by master.type
# Inquiry Analysis Report - CSV
admin-report.inquiry-analysis.total.csv.specific.allmember=and spm_groupT.aiflag = 1
admin-report.inquiry-analysis.summary.csv.specific.allmember=and A.aiflag = 1

admin-report.inquiry-analysis.total.csv.specific.group=and spm_groupT.groupid = {0}
admin-report.inquiry-analysis.total.csv.specific.group.monthlyplan=and spm_groupT.monthly_plan in ({0}) and spm_groupT.disabled = 0 and spm_groupT.deleted = 0
admin-report.inquiry-analysis.summary.csv.specific.group=and A.groupid = {0}
admin-report.inquiry-analysis.summary.csv.specific.group.monthlyplan=and A.monthly_plan in ({0}) and A.disabled = 0 and A.deleted = 0

admin-report.inquiry-analysis.total.csv.specific.user=and spm_userT.uid = {0}
admin-report.inquiry-analysis.total.csv.specific.user.monthlyplan=and spm_groupT.monthly_plan in ({0}) and spm_groupT.disabled = 0 and spm_groupT.deleted = 0
admin-report.inquiry-analysis.summary.csv.specific.user=and A.uid = {0}
admin-report.inquiry-analysis.summary.csv.specific.user.monthlyplan=and A.monthly_plan in ({0}) and A.disabled = 0 and A.deleted = 0

admin-report.inquiry-analysis.total.csv=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", (select spm_group.aicode from spm_group (nolock), spm_user (nolock) where spm_user.uid = spm_userT.uid and spm_user.groupccraid = spm_group.groupid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = spm_userT.uid) as "Member Name", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end from spm_user (nolock) where spm_user.uid = spm_userT.uid) as "User ID", count(trans.transactionid) as "Number of Inquiry"  from  spm_transaction trans (nolock),mal_productdeliver mal_prod (nolock),spm_user spm_userT (nolock),spm_group spm_groupT(nolock) where trans.transactionid = mal_prod.transactionid and   trans.uid = spm_userT.uid  and   spm_userT.groupccraid = spm_groupT.groupid and   trans.objectid=47 and  (isnull(mal_prod.hkbrc,'') <> '' or isnull(mal_prod.hkci,'') <> '' or isnull(mal_prod.other_reg_no,'') <> '' or isnull(mal_prod.namesearch,'') <> '') and   trans.createddate >= convert(datetime, '{1}', 101) and   trans.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) and   spm_userT.createdDate < dateadd(day, 1, convert(datetime, '{2}', 101)) {0} group by spm_groupT.groupid, spm_userT.uid order by {5}
#admin-report.inquiry-analysis.total.csv=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", (select spm_group.aicode from spm_group (nolock), spm_user (nolock)  where spm_user.uid = inquiry.uid and spm_user.groupccraid = spm_group.groupid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock)  where spm_group.groupid = spm_user.groupccraid and spm_user.uid = inquiry.uid) as "Member Name", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end from spm_user (nolock) where spm_user.uid = inquiry.uid) as "User ID", sum(inquiry.noofsearch) as "Number of Inquiry" from view_inquiry_analysis inquiry, spm_group where inquiry.groupid = spm_group.groupid and inquiry.createddate >= convert(datetime, '{1}', 101) and inquiry.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) {0} group by inquiry.groupid, inquiry.uid order by {5}
admin-report.inquiry-analysis.summary.csv=select  '{3}' as "Report Date",'{4}' as "Requested By",datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", A.aicode as "Member Code", A.group_name_en as "Member Name",(select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end from spm_user (nolock) where spm_user.uid = A.uid) as "User ID", A.type as "Access", sum(A.noofsearch) as "No. Of Searches", round(((sum(A.noofsearch) * 100.00) / D.totalserarch),2)as "Total %", sum(isnull(A.basicreport,0))+sum(isnull(A.chinesereport,0))+sum(isnull(A.nomatchreport,0))+sum(isnull(A.regis_monitoring,0))+ sum(isnull(A.regis_enquiry,0)) as "No. Of Report Ordered", case when sum(isnull(A.basicreport,0))+sum(isnull(A.chinesereport,0))+ sum(isnull(A.nomatchreport,0))+ sum(isnull(A.regis_monitoring,0))+sum(isnull(A.regis_enquiry,0)) = 0 then 0 else ((sum(isnull(A.basicreport,0)) +sum(isnull(A.chinesereport,0))+sum(isnull(A.nomatchreport,0))+ sum(isnull(A.regis_monitoring,0))+sum(isnull(A.regis_enquiry,0))) * 100.00) / isnull(B.totaluid,1) end as "Total %", cast(((sum(isnull(A.basicreport,0))+sum(isnull(A.chinesereport,0)) +sum(isnull(A.nomatchreport,0))+ sum(isnull(A.regis_monitoring,0))+sum(isnull(A.regis_enquiry,0))) * 100.00) / sum(A.noofsearch) as numeric(5,2)) as "Report Ordered (%)", sum(isnull(A.basicreport,0)) as "Basic Report", sum(isnull(A.chinesereport,0)) as "Chinese Report", sum(isnull(A.nomatchreport,0)) as "No-match Report", sum(A.regis_monitoring) as  "Monitoring Alert", sum(A.regis_enquiry) as "Enquiry Alert" from  (select spm_group.groupid ,spm_group.aicode,spm_group.group_name_en, spm_group.monthly_plan , spm_group.disabled , spm_group.deleted , trans.uid , trans.transactionid , spm_group.aiflag , case 	when isnull(mal_prod.hkbrc,'') <> '' and mal_prod.requesttype = 'O' then 1  when isnull(mal_prod.hkci,'') <> '' and mal_prod.requesttype = 'O' then 2  when isnull(mal_prod.other_reg_no,'') <> '' and mal_prod.requesttype = 'O' then 3  when isnull(mal_prod.namesearch,'') <> '' then 4   when isnull(mal_prod.hkbrc,'') <> '' and mal_prod.requesttype = 'B' then 5   when isnull(mal_prod.hkci,'') <> '' and mal_prod.requesttype = 'B' then 6  when isnull(mal_prod.other_reg_no,'') <> '' and mal_prod.requesttype = 'B' then 7 end as type , case 	when trans.objectid = 47 then 1 end as noofsearch , case 	when isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreport 	, case 	when isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreport , case 	when isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereport , case 	when isnull(regis.product_type,0)=54 then regis.cnt else 0 end as regis_monitoring , case 	when isnull(regis.product_type,0)=56 then regis.cnt else 0 end as regis_enquiry from  spm_transaction trans (nolock) inner join mal_productdeliver mal_prod (nolock) on mal_prod.transactionid=trans.transactionid inner join spm_user (nolock) on spm_user.uid=trans.uid  inner join  spm_group (nolock) on spm_group.groupid=spm_user.groupccraid left outer join spm_expense ex(nolock) on ex.expenseid=mal_prod.expenseid left outer join (select transactionid,product_type,count(transactionid) as cnt from prod_register (nolock) group by transactionid,product_type) regis on mal_prod.transactionid = regis.transactionid left outer join (select mal1.transactionid,1 as flag from mal_productdeliver mal1 (nolock) where mal1.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where (a.expenseid = mal1.expenseid) order by a.transactionid desc) or mal1.expenseid is null) tranid on tranid.transactionid=mal_prod.transactionid where trans.objectid=47 and  trans.createddate >= convert(datetime, '{1}', 101) and   trans.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) ) A , (select  sum_order.uid,sum(nomatchreport)+sum(basicreport)+sum(chinesereport)+sum(regis_monitoring)+sum(regis_enquiry) as totaluid from 	(select trans.uid, case 	when trans.objectid = 47 then 1 end as noofsearch , case 	when isnull(mal_prod.objectid,0)=47 and isnull(mal_prod.expenseid,0)<>0 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as nomatchreport , case 	when isnull(mal_prod.objectid,0)=50 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as basicreport , case 	when isnull(mal_prod.objectid,0)=51 and ex.disabled=0 and tranid.flag=1 then 1 else 0 end as chinesereport , case 	when isnull(regis.product_type,0)=54 then regis.cnt else 0 end as regis_monitoring , case 	when isnull(regis.product_type,0)=56 then regis.cnt else 0 end as regis_enquiry from  spm_transaction trans (nolock) inner join mal_productdeliver mal_prod (nolock) on mal_prod.transactionid=trans.transactionid inner join spm_user (nolock)	on spm_user.uid=trans.uid  inner join  spm_group (nolock) on spm_group.groupid=spm_user.groupccraid left outer join spm_expense ex(nolock) on ex.expenseid=mal_prod.expenseid left outer join (select transactionid,product_type,count(transactionid) as cnt from prod_register (nolock) group by transactionid,product_type) regis on mal_prod.transactionid = regis.transactionid left outer join (select mal1.transactionid,1 as flag from mal_productdeliver mal1 (nolock) 	where mal1.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where (a.expenseid = mal1.expenseid) order by a.transactionid desc) or mal1.expenseid is null) tranid on tranid.transactionid=mal_prod.transactionid where trans.objectid=47 and  trans.createddate >= convert(datetime, '{1}', 101)  and   trans.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) ) sum_order group by sum_order.uid ) B ,(select transT.uid,case when count(transT.uid)=0 then 1 else count(transT.uid) end as totalserarch from spm_transaction transT (nolock),mal_productdeliver mal_prodT (nolock) where transT.transactionid = mal_prodT.transactionid and   transT.objectid=47 	and  (isnull(mal_prodT.hkbrc,'') <> '' or isnull(mal_prodT.hkci,'') <> '' or isnull(mal_prodT.other_reg_no,'') <> '' or isnull(mal_prodT.namesearch,'') <> '') and transT.createddate >= convert(datetime, '{1}', 101) and transT.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) group by transT.uid) D where A.uid=B.uid and A.uid=D.uid and A.type is not null {0} group by A.groupid,A.uid,A.aicode,A.group_name_en,A.type,B.totaluid,D.totalserarch order by {5}, "User ID", A.type
#admin-report.inquiry-analysis.summary.csv=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", (select spm_group.aicode from spm_group (nolock), spm_user (nolock)  where spm_user.uid = inquiry.uid and spm_user.groupccraid = spm_group.groupid) as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock)  where spm_group.groupid = spm_user.groupccraid and spm_user.uid = inquiry.uid) as "Member Name", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end from spm_user (nolock) where spm_user.uid = inquiry.uid) as "User ID", case when inquiry.type = 1 then 'Online Inquiry (Search by HKBRC)' when inquiry.type = 2 then 'Online Inquiry (Search by HKCI)' when inquiry.type = 3 then 'Online Inquiry (Search by Other Registration)' when inquiry.type = 4 then 'Online Inquiry (Name Search)' when inquiry.type = 5 then 'Batch Request (Search by HKBRC)' when inquiry.type = 6 then 'Batch Request (Search by HKCI)' when inquiry.type = 7 then 'Batch Request (Search by Other Registration)' end  as "Access",  sum(inquiry.noofsearch) as "No. Of Searches", (sum(inquiry.noofsearch) * 100.00) / (select count(spm_trans.objectid) from spm_transaction spm_trans (nolock) , mal_productdeliver mal (nolock) where spm_trans.uid = inquiry.uid and spm_trans.objectid = 47 and spm_trans.transactionid = mal.transactionid and (isnull(mal.hkbrc,'') <> '' or isnull(mal.hkci,'') <> '' or isnull(mal.other_reg_no,'') <> '' or isnull(mal.namesearch,'') <> '')  and spm_trans.createddate >= convert(datetime, '{1}', 101) and spm_trans.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) ) as "Total %", sum(isnull(inquiry.basicreport,0))+sum(isnull(inquiry.chinesereport,0))+sum(isnull(inquiry.nomatchreport,0))+ sum(isnull(inquiry.regis_monitoring,0))+sum(isnull(inquiry.regis_enquiry,0)) as "No. Of Report Ordered/Subscribed", case when sum(isnull(inquiry.basicreport,0))+sum(isnull(inquiry.chinesereport,0))+sum(isnull(inquiry.nomatchreport,0))+ sum(isnull(inquiry.regis_monitoring,0))+sum(isnull(inquiry.regis_enquiry,0))  = 0 then 0 else ((sum(isnull(inquiry.basicreport,0))+sum(isnull(inquiry.chinesereport,0))+sum(isnull(inquiry.nomatchreport,0))+ sum(isnull(inquiry.regis_monitoring,0))+sum(isnull(inquiry.regis_enquiry,0))) * 100.00) / (select sum(isnull(total.basicreport,0))+sum(isnull(total.chinesereport,0))+sum(isnull(total.nomatchreport,0))+ sum(isnull(total.regis_monitoring,0))+sum(isnull(total.regis_enquiry,0)) from view_inquiry_analysis total where total.uid = inquiry.uid and total.groupid = inquiry.groupid and total.createddate >= convert(datetime, '{1}', 101) and total.createddate < dateadd(day, 1, convert(datetime, '{2}', 101))) end as "Total %", cast(((sum(isnull(inquiry.basicreport,0))+sum(isnull(inquiry.chinesereport,0))+sum(isnull(inquiry.nomatchreport,0))+ sum(isnull(inquiry.regis_monitoring,0))+sum(isnull(inquiry.regis_enquiry,0))) * 100.00) / sum(inquiry.noofsearch) as numeric(5,2)) as "Report Ordered (%)", sum(isnull(inquiry.basicreport,0)) as "Basic Report", sum(isnull(inquiry.chinesereport,0)) as "Chinese Report", sum(isnull(inquiry.nomatchreport,0)) as "No-match Report", sum(inquiry.regis_monitoring) as  "Monitoring",  sum(inquiry.regis_enquiry) as "Enquiry Alert"  from view_inquiry_analysis inquiry, spm_group where inquiry.groupid = spm_group.groupid and inquiry.createddate >= convert(datetime, '{1}', 101) and inquiry.createddate < dateadd(day, 1, convert(datetime, '{2}', 101)) {0} group by inquiry.groupid, inquiry.uid, inquiry.type order by {5}, "User ID", inquiry.type


# System Accesss Report
admin-report.system-access.success=select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as uid,  spm_user.user_name_en, (select count(spm_session.uid) from spm_session (nolock) where spm_session.uid = spm_user.uid and spm_session.loginflag = 1 and spm_session.logindate between cast('{1}'+'01' as datetime) and dateadd(month,1,'{1}'+'01')) as currentperiod, (select count(spm_session.uid) from spm_session (nolock) where spm_session.uid = spm_user.uid and spm_session.loginflag = 1 and spm_session.logindate between dateadd(month,-1,'{1}'+'01') and cast('{1}'+'01' as datetime)) as pastoneperiod, (select count(spm_session.uid) from spm_session (nolock) where spm_session.uid = spm_user.uid and spm_session.loginflag = 1 and spm_session.logindate between dateadd(month,-2,'{1}'+'01') and dateadd(month,-1,'{1}'+'01')) as pasttwoperiod from spm_user (nolock), (select distinct(uid) as s_uid from spm_session (nolock) where logindate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01') and loginflag = 1 ) as session where spm_user.uid = session.s_uid and ((spm_user.disabled = 0 and spm_user.deleted = 0) or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01'))) and spm_user.groupaiid = {0}
#admin-report.system-access.success=select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as uid,  spm_user.user_name_en, (select count(spm_session.uid) from spm_session (nolock) where spm_session.uid = spm_user.uid and spm_session.loginflag = 1 and spm_session.logindate between cast('{1}'+'01' as datetime) and dateadd(month,1,'{1}'+'01')) as currentperiod, (select count(spm_session.uid) from spm_session (nolock) where spm_session.uid = spm_user.uid and spm_session.loginflag = 1 and spm_session.logindate between dateadd(month,-1,'{1}'+'01') and cast('{1}'+'01' as datetime)) as pastoneperiod, (select count(spm_session.uid) from spm_session (nolock) where spm_session.uid = spm_user.uid and spm_session.loginflag = 1 and spm_session.logindate between dateadd(month,-2,'{1}'+'01') and dateadd(month,-1,'{1}'+'01')) as pasttwoperiod from spm_user (nolock), (select distinct(uid) as s_uid from spm_session (nolock) where logindate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01') and loginflag = 1 ) as session where spm_user.uid = session.s_uid and ((spm_user.disabled = 0 and spm_user.deleted = 0) or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01'))) and spm_user.groupaiid = {0}
admin-report.system-access.unsuccess=select spm_session.logindate, case when spm_session.loginflag = 2 then 'Unexpect Exception' when spm_session.loginflag = 3 then 'Incorrect Userid' when spm_session.loginflag = 4 then 'Incorrect Password' when spm_session.loginflag = 5 then 'Cannot Register' when spm_session.loginflag = 6 then 'Cannot Record Transaction' when spm_session.loginflag = 7 then 'User Disabled' when spm_session.loginflag = 8 then 'User Overlimit Connection' when spm_session.loginflag = 9 then 'Encrypt Fail' when spm_session.loginflag = 10 then 'User Expired' when spm_session.loginflag = 11 then 'Not Permitted Time' when spm_session.loginflag = 12 then 'AI Expired' when spm_session.loginflag = 14 then 'Incorrect Password' when spm_session.loginflag = 15 then 'AI Overlimit Connection' end as reasonunsuccessful, case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as uid, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, spm_user.user_name_en from spm_session (nolock), spm_user (nolock) where spm_session.uid = spm_user.uid and ((spm_user.disabled = 0 and spm_user.deleted = 0) or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01'))) and spm_session.loginflag <> 1 and spm_user.groupaiid = {0} and spm_session.logindate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01')
#admin-report.system-access.unsuccess=select spm_session.logindate, case when spm_session.loginflag = 2 then 'Unexpect Exception' when spm_session.loginflag = 3 then 'Incorrect Userid' when spm_session.loginflag = 4 then 'Incorrect Password' when spm_session.loginflag = 5 then 'Cannot Register' when spm_session.loginflag = 6 then 'Cannot Record Transaction' when spm_session.loginflag = 7 then 'User Disabled' when spm_session.loginflag = 8 then 'User Overlimit Connection' when spm_session.loginflag = 9 then 'Encrypt Fail' when spm_session.loginflag = 10 then 'User Expired' when spm_session.loginflag = 11 then 'Not Permitted Time' when spm_session.loginflag = 12 then 'AI Expired' when spm_session.loginflag = 14 then 'Incorrect Password' when spm_session.loginflag = 15 then 'AI Overlimit Connection' end as reasonunsuccessful, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as uid, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, spm_user.user_name_en from spm_session (nolock), spm_user (nolock) where spm_session.uid = spm_user.uid and ((spm_user.disabled = 0 and spm_user.deleted = 0) or ((spm_user.disabled = 1 or spm_user.deleted = 1) and spm_user.updateddate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01'))) and spm_session.loginflag <> 1 and spm_user.groupaiid = {0} and spm_session.logindate between dateadd(month,-2,'{1}'+'01') and dateadd(month,1,'{1}'+'01')

# Password Maintenance Report
admin-report.password-maintenance=select spm_password_mod.changedate as dateandtime, case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid, (select case when temp_user.deleted = 0 then temp_user.userid else substring(temp_user.userid,1,len(temp_user.userid)-(len(temp_user.uid)+1)) end from spm_user temp_user (nolock) where temp_user.uid = spm_password_mod.changeby) as authorizer, case when spm_password_mod.uid = spm_password_mod.changeby then 'Change Password' when spm_password_mod.uid <> spm_password_mod.changeby then 'Reset Password' end as activity from spm_user (nolock), spm_password_mod (nolock) where spm_user.uid = spm_password_mod.uid and spm_user.groupaiid = {0} and spm_password_mod.changedate between convert(datetime, '{1}', 101) and dateadd(day, 1, convert( datetime ,'{2}' ,101)) union select spm_user.createddate as dateandtime, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, (select case when temp_user.deleted = 0 then temp_user.userid else substring(temp_user.userid,1,len(temp_user.userid)-(len(temp_user.uid)+1)) end from spm_user temp_user (nolock) where temp_user.uid = spm_user.createdby) as authorizer, 'New Password' as activity from spm_user (nolock) where  spm_user.groupaiid = {0} and spm_user.createddate between convert(datetime, '{1}', 101) and dateadd(day, 1, convert( datetime ,'{2}' ,101)) order by {3} , {4}  {5}
#admin-report.password-maintenance=select spm_password_mod.changedate as dateandtime, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, (select case when temp_user.deleted = 0 then temp_user.userid else substring(temp_user.userid,1,len(temp_user.userid)-(len(temp_user.uid)+1)) end from spm_user temp_user (nolock) where temp_user.uid = spm_password_mod.changeby) as authorizer, case when spm_password_mod.uid = spm_password_mod.changeby then 'Change Password' when spm_password_mod.uid <> spm_password_mod.changeby then 'Reset Password' end as activity from spm_user (nolock), spm_password_mod (nolock) where spm_user.uid = spm_password_mod.uid and spm_user.groupaiid = {0} and spm_password_mod.changedate between convert(datetime, '{1}', 101) and dateadd(day, 1, convert( datetime ,'{2}' ,101)) union select spm_user.createddate as dateandtime, case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid, (select case when temp_user.deleted = 0 then temp_user.userid else substring(temp_user.userid,1,len(temp_user.userid)-(len(temp_user.uid)+1)) end from spm_user temp_user (nolock) where temp_user.uid = spm_user.createdby) as authorizer, 'New Password' as activity from spm_user (nolock) where  spm_user.groupaiid = {0} and spm_user.createddate between convert(datetime, '{1}', 101) and dateadd(day, 1, convert( datetime ,'{2}' ,101)) order by {3} , {4}  {5}

# Reports Ordered on Customers Without Data Submission
admin-report.summary-consent=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{0}')+' '+datename(mm,'{0}')+' '+datename(yyyy,'{0}')+' to '+datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}') as "Report Period", aicode as "Member Code", group_name_en as "Member Name", productcode as "Product Code", case when productcode = 47 then 'No-match Report' else (select spm_object.objectlabel from spm_object (nolock) where spm_object.objectid = productcode) end as "Product", sum(isnull(total,0)) "Total Reports Ordered", case when sum(isnull(total,0)) = 0 then 0 else cast((sum(isnull(withconsent,0)) * 100.00) / sum(isnull(total,0)) as decimal) end as "% With Data Submission", case when sum(isnull(total,0)) = 0 then 0 else cast((sum(isnull(withoutconsent,0)) * 100.00) / sum(isnull(total,0)) as decimal) end as "% Without Data Submission" from (select spm_group.aicode, spm_group.group_name_en, spm_expense.productusage as productcode, case when spm_expense.productusage = 50 then 1 when spm_expense.productusage = 51 then 1 when spm_expense.productusage = 47 then 1 when spm_expense.productusage = 54 then 1 when spm_expense.productusage = 56 then 1 end as total, case when spm_expense.submission_flag = 1 and (spm_expense.requesttime < spm_expense.revoc_effect_date or spm_expense.revoc_effect_date is null) then 1 end as withconsent, case when spm_expense.submission_flag = 0 or spm_expense.requesttime >= spm_expense.revoc_effect_date then 1 end as withoutconsent from spm_group (nolock) inner join (select expense.groupaiid, expense.requesttime, expense.productusage, expense.submission_flag,  expense.revoc_effect_date  from spm_expense expense (nolock) where expense.disabled = 0  and expense.requesttime >= '{0}' and expense.requesttime < dateadd(day, 1, '{1}')  ) as spm_expense on spm_group.groupid = spm_expense.groupaiid {2} ) data group by aicode, group_name_en, productcode order by "Member Code", "Product Code"
#admin-report.consent-transaction=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration/ Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.expenseid as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid left outer join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid order by a.transactionid desc) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_group (nolock) on expense.groupaiid = spm_group.groupid where expense.disabled = 0 and (expense.requesttime >= expense.revoc_effect_date or expense.submission_flag = 0) {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {3}
admin-report.consent-transaction=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration/ Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid left outer join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid order by a.transactionid desc) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_group (nolock) on expense.groupaiid = spm_group.groupid where expense.disabled = 0 and (expense.requesttime >= expense.revoc_effect_date or expense.submission_flag = 0) {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {3}
#admin-report.consent-transaction=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration/ Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid left outer join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid order by a.transactionid desc) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_group (nolock) on expense.groupaiid = spm_group.groupid where expense.disabled = 0 and (expense.requesttime >= expense.revoc_effect_date or expense.submission_flag = 0) {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {3}

# Reports Ordered on Customers Without Data Submission - CSV
admin-report.summary-consent-csv.specific-allmember=where spm_group.aiflag = 1
admin-report.consent-transaction-csv.specific-allmember=and expense.groupaiid <> 1

admin-report.summary-consent-csv.specific=where spm_group.groupid = {0}
admin-report.summary-consent-csv.specific.monthlyplan=where spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.consent-transaction-csv.specific=and expense.groupaiid = {0}
admin-report.consent-transaction-csv.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0

admin-report.summary-consent-csv=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{0}')+' '+datename(mm,'{0}')+' '+datename(yyyy,'{0}')+' to '+datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}') as "Report Period", aicode as "Member Code", group_name_en as "Member Name", productcode as "Product Code", case when productcode = 47 then 'No-match Report' else (select spm_object.objectlabel from spm_object (nolock) where spm_object.objectid = productcode) end as "Product", sum(isnull(total,0)) "Total Reports Ordered", case when sum(isnull(total,0)) = 0 then 0 else cast((sum(isnull(withconsent,0)) * 100.00) / sum(isnull(total,0)) as decimal) end as "% With Data Submission", case when sum(isnull(total,0)) = 0 then 0 else cast((sum(isnull(withoutconsent,0)) * 100.00) / sum(isnull(total,0)) as decimal) end as "% Without Data Submission" from (select spm_group.aicode, spm_group.group_name_en, spm_expense.productusage as productcode, case when spm_expense.productusage = 50 then 1 when spm_expense.productusage = 51 then 1 when spm_expense.productusage = 47 then 1 when spm_expense.productusage = 54 then 1 when spm_expense.productusage = 56 then 1 end as total, case when spm_expense.submission_flag = 1 and (spm_expense.requesttime < spm_expense.revoc_effect_date or spm_expense.revoc_effect_date is null) then 1 end as withconsent, case when spm_expense.submission_flag = 0 or spm_expense.requesttime >= spm_expense.revoc_effect_date then 1 end as withoutconsent from spm_group (nolock) inner join (select expense.groupaiid, expense.requesttime, expense.productusage, expense.submission_flag,  expense.revoc_effect_date  from spm_expense expense (nolock) where expense.disabled = 0  and expense.requesttime between '{0}' and dateadd(day, 1, '{1}')  ) as spm_expense on spm_group.groupid = spm_expense.groupaiid {2} ) data group by aicode, group_name_en, productcode order by {5}, "Product Code"
admin-report.consent-transaction-csv=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration/ Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason (nolock) where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid left outer join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid order by a.transactionid desc) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_group (nolock) on expense.groupaiid = spm_group.groupid where expense.disabled = 0 and (expense.requesttime >= expense.revoc_effect_date or expense.submission_flag = 0) {0} and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {6}, {3}
#admin-report.consent-transaction-csv=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration/ Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid left outer join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid order by a.transactionid desc) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_group (nolock) on expense.groupaiid = spm_group.groupid where expense.disabled = 0 and (expense.requesttime >= expense.revoc_effect_date or expense.submission_flag = 0) {0} and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {6}, {3}

admin-report.summary-consent-csv.specific-ccra-allmember=where (spm_group.parentgroupid = 1 or spm_group.parentgroupid is null)
admin-report.consent-transaction-csv.specific-ccra-allmember=and expense.groupaiid = 1

admin-report.summary-consent-csv.specific-ccra=where spm_group.groupid = {0}
admin-report.summary-consent-csv.specific-ccra.monthlyplan=where spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.consent-transaction-csv.specific-ccra=and spm_group.groupid = {0}
admin-report.consent-transaction-csv.specific-ccra.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0

admin-report.summary-consent-csv-ccra=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{0}')+' '+datename(mm,'{0}')+' '+datename(yyyy,'{0}')+' to '+datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}') as "Report Period", aicode as "Member Code", group_name_en as "Member Name", productcode as "Product Code", case when productcode = 47 then 'No-match Report' else (select spm_object.objectlabel from spm_object (nolock) where spm_object.objectid = productcode) end as "Product", sum(isnull(total,0)) "Total Reports Ordered", case when sum(isnull(total,0)) = 0 then 0 else cast((sum(isnull(withconsent,0)) * 100.00) / sum(isnull(total,0)) as decimal) end as "% With Data Submission", case when sum(isnull(total,0)) = 0 then 0 else cast((sum(isnull(withoutconsent,0)) * 100.00) / sum(isnull(total,0)) as decimal) end as "% Without Data Submission" from (select spm_group.aicode, spm_group.group_name_en, spm_expense.productusage as productcode, case when spm_expense.productusage = 50 then 1 when spm_expense.productusage = 51 then 1 when spm_expense.productusage = 47 then 1 when spm_expense.productusage = 54 then 1 when spm_expense.productusage = 56 then 1 end as total, case when spm_expense.submission_flag = 1 and (spm_expense.requesttime < spm_expense.revoc_effect_date or spm_expense.revoc_effect_date is null) then 1 end as withconsent, case when spm_expense.submission_flag = 0 or spm_expense.requesttime >= spm_expense.revoc_effect_date then 1 end as withoutconsent from spm_group (nolock) inner join spm_user (nolock) on spm_group.groupid = spm_user.groupccraid inner join (select expense.uid, expense.requesttime, expense.productusage, expense.submission_flag,  expense.revoc_effect_date  from spm_expense expense (nolock) where expense.disabled = 0  and expense.requesttime between '{0}' and dateadd(day, 1, '{1}')  ) as spm_expense on spm_user.uid = spm_expense.uid {2} ) data group by aicode, group_name_en, productcode order by {5}, "Product Code"
admin-report.consent-transaction-csv-ccra=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration/ Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason (nolock) where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid left outer join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid order by a.transactionid desc) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_user (nolock) on expense.uid = spm_user.uid inner join spm_group (nolock) on spm_user.groupccraid = spm_group.groupid where expense.disabled = 0 and (expense.requesttime >= expense.revoc_effect_date or expense.submission_flag = 0) {0} and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {6}, {3}
#admin-report.consent-transaction-csv-ccra=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration/ Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid left outer join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select top 1 a.transactionid from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid order by a.transactionid desc) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_user (nolock) on expense.uid = spm_user.uid inner join spm_group (nolock) on spm_user.groupccraid = spm_group.groupid where expense.disabled = 0 and (expense.requesttime >= expense.revoc_effect_date or expense.submission_flag = 0) {0} and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {6}, {3}

#================================ Usage ====================================

# Usage Report
admin-report.summary-usage-all=select groupid, group_name_en, sum(isnull(basicreport,0)) basicreport, sum(isnull(chinesereport,0)) chinesereport, sum(isnull(nomatchreport,0)) nomatchreport, sum(isnull(enquiryalert,0)) enquiryalert,sum(isnull(monitoringalert,0)) monitoringalert from (select spm_group.groupid, spm_group.group_name_en, case when spm_expense.productusage = 50 then 1 end as basicreport, case when spm_expense.productusage = 51 then 1 end as chinesereport, case when spm_expense.productusage = 47 then 1 end as nomatchreport, case when spm_expense.productusage = 56 then 1 end as enquiryalert, case when spm_expense.productusage = 54 then 1 end as monitoringalert from spm_group (nolock) left outer join (select expense.groupaiid, expense.requesttime, expense.productusage  from spm_expense expense (nolock)  where expense.disabled = 0  and expense.requesttime between '{0}' and dateadd(day, 1, '{1}')  ) as spm_expense on spm_group.groupid = spm_expense.groupaiid where spm_group.aiflag = 1 ) data group by groupid, group_name_en order by {2}
admin-report.summary-usage=select groupid, group_name_en, sum(isnull(basicreport,0)) basicreport, sum(isnull(chinesereport,0)) chinesereport, sum(isnull(nomatchreport,0)) nomatchreport, sum(isnull(enquiryalert,0)) enquiryalert,sum(isnull(monitoringalert,0)) monitoringalert from (select spm_group.groupid, spm_group.group_name_en, case when spm_expense.productusage = 50 then 1 end as basicreport, case when spm_expense.productusage = 51 then 1 end as chinesereport, case when spm_expense.productusage = 47 then 1 end as nomatchreport, case when spm_expense.productusage = 56 then 1 end as enquiryalert, case when spm_expense.productusage = 54 then 1 end as monitoringalert from spm_group (nolock) left outer join (select expense.groupaiid, expense.requesttime, expense.productusage  from spm_expense expense (nolock)  where expense.disabled = 0  and expense.requesttime between '{0}' and dateadd(day, 1, '{1}')  ) as spm_expense on spm_group.groupid = spm_expense.groupaiid where spm_group.groupid = {2} and spm_group.aiflag = 1 ) data group by groupid, group_name_en
admin-report.usage-transaction=select expense.requesttime as deliverydate, master_duns.hkbrc as hkbrc, master_duns.hkci as hkci, master_duns.other_reg as otherreg, master_duns.other_reg_place as placereg, expense.customer_no as customerno, expense.loc_branch_id as location, expense.acc_mnger_code as managercode, case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock), prod_register regis (nolock), prod_alert_trans trans (nolock) where base_reason.id = regis.reasoncode and expense.expenseid = trans.expenseid and trans.monitorid = regis.monitorid) else (select base_reason.description_en from base_reason (nolock) where base_reason.id = mal_product.reasoncode) end as reason, (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) userid, expense.productusage as productcode, case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as productname, expense.REPORT_REF_NO reportrefno, mal_product.airefcode1 as airef1, mal_product.airefcode2 as airef2, mal_product.airefcode3 as airef3 from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) where expense.groupaiid = {0} and expense.disabled = 0 and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {3}
#admin-report.usage-transaction=select expense.requesttime as deliverydate, master_duns.hkbrc as hkbrc, master_duns.hkci as hkci, master_duns.other_reg as otherreg, master_duns.other_reg_place as placereg, expense.customer_no as customerno, expense.loc_branch_id as location, expense.acc_mnger_code as managercode, case when expense.productusage = 56 then (select base_reason.description_en from base_reason, prod_register regis (nolock), prod_alert_trans trans (nolock) where base_reason.id = regis.reasoncode and expense.expenseid = trans.expenseid and trans.monitorid = regis.monitorid) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as reason, (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user where spm_user.uid = expense.uid) userid, expense.productusage as productcode, case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as productname, expense.REPORT_REF_NO reportrefno, mal_product.airefcode1 as airef1, mal_product.airefcode2 as airef2, mal_product.airefcode3 as airef3 from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) where expense.groupaiid = {0} and expense.disabled = 0 and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {3}
admin-report.discharge-transaction=select expense.requesttime as deliverydate, master_duns.hkbrc as hkbrc, master_duns.hkci as hkci, master_duns.other_reg as otherreg, master_duns.other_reg_place as placereg, expense.customer_no as customerno, expense.loc_branch_id as location, expense.acc_mnger_code as managercode, case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock), prod_register regis (nolock), prod_alert_trans trans (nolock) where base_reason.id = regis.reasoncode and expense.expenseid = trans.expenseid and trans.monitorid = regis.monitorid) else (select base_reason.description_en from base_reason (nolock) where base_reason.id = mal_product.reasoncode) end as reason, (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) userid, expense.productusage as productcode, case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as productname, expense.REPORT_REF_NO reportrefno, mal_product.airefcode1 as airef1, mal_product.airefcode2 as airef2, mal_product.airefcode3 as airef3, discharge.createddate dischargedate, case when discharge.flag = -1 then 'Discharged' else 'Undo Discharged' end as status from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) inner join spm_discharge_trans discharge (nolock) on expense.expenseid = discharge.expenseid where expense.groupaiid = {0} and expense.disabled = 0 and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {3}
#admin-report.discharge-transaction=select expense.requesttime as deliverydate, master_duns.hkbrc as hkbrc, master_duns.hkci as hkci, master_duns.other_reg as otherreg, master_duns.other_reg_place as placereg, expense.customer_no as customerno, expense.loc_branch_id as location, expense.acc_mnger_code as managercode, case when expense.productusage = 56 then (select base_reason.description_en from base_reason, prod_register regis (nolock), prod_alert_trans trans (nolock) where base_reason.id = regis.reasoncode and expense.expenseid = trans.expenseid and trans.monitorid = regis.monitorid) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as reason, (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user where spm_user.uid = expense.uid) userid, expense.productusage as productcode, case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as productname, expense.REPORT_REF_NO reportrefno, mal_product.airefcode1 as airef1, mal_product.airefcode2 as airef2, mal_product.airefcode3 as airef3, discharge.createddate dischargedate, case when discharge.flag = -1 then 'Discharged' else 'Undo Discharged' end as status from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) inner join spm_discharge_trans discharge (nolock) on expense.expenseid = discharge.expenseid where expense.groupaiid = {0} and expense.disabled = 0 and expense.requesttime between '{1}' and dateadd(day, 1, '{2}') order by {3}

# Usage Report - CSV
admin-report.summary-usage-csv.specific-allmember=where spm_group.aiflag = 1
admin-report.usage-transaction-csv.specific-allmember=and expense.groupaiid <> 1
admin-report.discharge-transaction-csv.specific-allmember=and expense.groupaiid <> 1

admin-report.summary-usage-csv.specific=where spm_group.groupid = {0}
admin-report.summary-usage-csv.specific.monthlyplan=where spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.usage-transaction-csv.specific=and expense.groupaiid = {0}
admin-report.usage-transaction-csv.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.discharge-transaction-csv.specific=and expense.groupaiid = {0}
admin-report.discharge-transaction-csv.specific.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0

admin-report.summary-usage-csv=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{0}')+' '+datename(mm,'{0}')+' '+datename(yyyy,'{0}')+' to '+datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}') as "Report Period", aicode as "Member Code", group_name_en as "Member Name", productcode as "Product Code", case when productcode = 47 then 'No-match Report' else (select spm_object.objectlabel from spm_object (nolock) where spm_object.objectid = productcode) end as "Product", sum(isnull(total,0)) "Usage" from (select spm_group.aicode, spm_group.group_name_en, spm_expense.productusage as productcode, case when spm_expense.productusage = 50 then 1 when spm_expense.productusage = 51 then 1 when spm_expense.productusage = 47 then 1 when spm_expense.productusage = 56 then 1 when spm_expense.productusage = 54 then 1 end as total from spm_group (nolock) inner join (select expense.groupaiid, expense.requesttime, expense.productusage  from spm_expense expense (nolock)  where expense.disabled = 0  and expense.requesttime >= '{0}' and expense.requesttime < dateadd(day, 1, '{1}')  ) as spm_expense on spm_group.groupid = spm_expense.groupaiid {2} ) data group by aicode, group_name_en, productcode order by {5}, "Product Code"
admin-report.usage-transaction-csv=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode)  else (select base_reason.description_en from base_reason (nolock) where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_group (nolock) on expense.groupaiid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}
#admin-report.usage-transaction-csv=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode)  else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_group on expense.groupaiid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}
admin-report.discharge-transaction-csv=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code",(select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3", discharge.createddate as "Discharge Date and Time", case when discharge.flag = -1 then 'Discharge' else 'Undo Discharge' end as "Status" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_discharge_trans discharge (nolock) on expense.expenseid = discharge.expenseid inner join spm_group (nolock) on expense.groupaiid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}
#admin-report.discharge-transaction-csv=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code",(select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3", discharge.createddate as "Discharge Date and Time", case when discharge.flag = -1 then 'Discharge' else 'Undo Discharge' end as "Status" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_discharge_trans discharge on expense.expenseid = discharge.expenseid inner join spm_group on expense.groupaiid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}

admin-report.summary-usage-csv.specific-ccra-allmember=where (spm_group.parentgroupid = 1 or spm_group.parentgroupid is null)
admin-report.usage-transaction-csv.specific-ccra-allmember=and expense.groupaiid = 1
admin-report.discharge-transaction-csv.specific-ccra-allmember=and expense.groupaiid = 1

admin-report.summary-usage-csv.specific-ccra=where spm_group.groupid = {0}
admin-report.summary-usage-csv.specific-ccra.monthlyplan=where spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.usage-transaction-csv.specific-ccra=and spm_group.groupid = {0}
admin-report.usage-transaction-csv.specific-ccra.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0
admin-report.discharge-transaction-csv.specific-ccra=and spm_group.groupid = {0}
admin-report.discharge-transaction-csv.specific-ccra.monthlyplan=and spm_group.monthly_plan in ({0}) and spm_group.disabled = 0 and spm_group.deleted = 0


admin-report.check.usage-report.over.2000.ccra=select count(*) from spm_expense expense (nolock) ,spm_user where expense.uid=spm_user.uid and expense.requesttime >= ? and expense.requesttime < dateadd(day, 1, ?) and expense.disabled = 0
admin-report.check.usage-report.over.2000=select count(*) from spm_expense expense (nolock) ,spm_user where expense.uid=spm_user.uid and expense.groupaiid = ? and expense.requesttime >= ? and expense.requesttime < dateadd(day, 1, ?) and expense.disabled = 0


admin-report.summary-usage-csv-ccra=select '{3}' as "Report Date", '{4}' as "Requested By", datename(dd,'{0}')+' '+datename(mm,'{0}')+' '+datename(yyyy,'{0}')+' to '+datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}') as "Report Period", aicode as "Member Code", group_name_en as "Member Name", productcode as "Product Code", case when productcode = 47 then 'No-match Report' else (select spm_object.objectlabel from spm_object (nolock) where spm_object.objectid = productcode) end as "Product", sum(isnull(total,0)) "Usage" from (select spm_group.aicode, spm_group.group_name_en, spm_expense.productusage as productcode, case when spm_expense.productusage = 50 then 1 when spm_expense.productusage = 51 then 1 when spm_expense.productusage = 47 then 1 when spm_expense.productusage = 56 then 1 when spm_expense.productusage = 54 then 1 end as total from spm_group (nolock) inner join spm_user (nolock) on spm_user.groupccraid = spm_group.groupid inner join (select expense.uid, expense.requesttime, expense.productusage  from spm_expense expense (nolock)  where expense.disabled = 0  and expense.requesttime >= '{0}' and expense.requesttime < dateadd(day, 1, '{1}')  ) as spm_expense on spm_user.uid = spm_expense.uid {2} ) data group by aicode, group_name_en, productcode order by {5}, "Product Code"
admin-report.usage-transaction-csv-ccra=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode)  else (select base_reason.description_en from base_reason (nolock) where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_user (nolock) on spm_user.uid = expense.uid inner join spm_group (nolock) on spm_user.groupccraid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}
#admin-report.usage-transaction-csv-ccra=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode)  else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_user on spm_user.uid = expense.uid inner join spm_group on spm_user.groupccraid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}
admin-report.discharge-transaction-csv-ccra=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time ", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason (nolock) where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else case when (len(spm_user.userid)-(len(spm_user.uid)+1) <= 0)  then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3", discharge.createddate as "Discharge Date and Time", case when discharge.flag = -1 then 'Discharge' else 'Undo Discharge' end as "Status" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_discharge_trans discharge (nolock) on expense.expenseid = discharge.expenseid inner join spm_user (nolock) on spm_user.uid = expense.uid inner join spm_group (nolock) on spm_user.groupccraid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}
#admin-report.discharge-transaction-csv-ccra=select '{4}' as "Report Date", '{5}' as "Requested By", datename(dd,'{1}')+' '+datename(mm,'{1}')+' '+datename(yyyy,'{1}')+' to '+datename(dd,'{2}')+' '+datename(mm,'{2}')+' '+datename(yyyy,'{2}') as "Report Period", spm_group.aicode as "Member Code", (select spm_group.group_name_en from spm_group (nolock), spm_user (nolock) where spm_group.groupid = spm_user.groupccraid and spm_user.uid = expense.uid) as "Member Name", expense.requesttime as "Report Ordered Date & Time ", master_duns.hkbrc as "HKBRC", master_duns.hkci as "HKCI", master_duns.other_reg as "Other Registration / Incorporation Number", master_duns.other_reg_place as "Place of Registration / Incorporation", expense.customer_no as "Customer Number", expense.loc_branch_id as "Location / Branch ID", expense.acc_mnger_code as "Account Manager Code", case when expense.productusage = 56 then (select base_reason.description_en from base_reason (nolock) where base_reason.id = register.reasoncode) else (select base_reason.description_en from base_reason where base_reason.id = mal_product.reasoncode) end as "Reason Code", (select case when spm_user.deleted = 0 then spm_user.userid else substring(spm_user.userid,1,len(spm_user.userid)-(len(spm_user.uid)+1)) end as userid from spm_user (nolock) where spm_user.uid = expense.uid) as "User ID", expense.productusage as "Product Code", case when expense.productusage = 47 then 'No-match Report'+ case when isnull(mal_product.hkbrc,'') <> '' then ' [HKBRC = '+mal_product.hkbrc+']' when isnull(mal_product.hkci,'') <> '' then ' [HKCI = '+mal_product.hkci+']' when isnull(mal_product.other_reg_no,'') <> '' then ' [Other Registration = '+mal_product.other_reg_no+']' when isnull(mal_product.namesearch,'') <> '' then ' [Name = '+mal_product.namesearch+']' else ' [No Criteria Entered]' end else spm_object.objectlabel end as "Product Name", expense.REPORT_REF_NO as "Report Ref. No.", case when expense.productusage = 56 then register.airefcode1 else mal_product.airefcode1 end as "AI Reference Code 1", case when expense.productusage = 56 then register.airefcode2 else mal_product.airefcode2 end as "AI Reference Code 2", case when expense.productusage = 56 then register.airefcode3 else mal_product.airefcode3 end as "AI Reference Code 3", discharge.createddate as "Discharge Date and Time", case when discharge.flag = -1 then 'Discharge' else 'Undo Discharge' end as "Status" from spm_expense expense (nolock) left outer join master_dunstable master_duns (nolock) on expense.cbuid = master_duns.cbuid inner join spm_object (nolock) on expense.productusage = spm_object.objectid left outer join mal_productdeliver mal_product (nolock) on expense.expenseid = mal_product.expenseid and mal_product.transactionid = (select max(a.transactionid) from mal_productdeliver a (nolock) where a.expenseid = expense.expenseid) left outer join (select trans.expenseid, regis.reasoncode, regis.airefcode1, regis.airefcode2, regis.airefcode3 from prod_register regis (nolock), prod_alert_trans trans (nolock) where trans.monitorid = regis.monitorid) as register on expense.expenseid = register.expenseid inner join spm_discharge_trans discharge on expense.expenseid = discharge.expenseid inner join spm_user on spm_user.uid = expense.uid inner join spm_group on spm_user.groupccraid = spm_group.groupid where expense.disabled = 0 {0} and expense.requesttime >= '{1}' and expense.requesttime < dateadd(day, 1, '{2}') order by {6}, {3}



#Detail User Maintenance
admin-report.detail-user-maintenance.delete-user.csv.specific-allmember=and U.groupaiid <> 1
admin-report.detail-user-maintenance.delete-user.csv.specific-ccra-allmember=and U.groupaiid = 1
admin-report.detail-user-maintenance.delete-user.csv.specific-ccra-nonmember=and U.groupid = {0}
admin-report.detail-user-maintenance.delete-user.csv.specific-ccra.monthlyplan=and (g.parentgroupid in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0) or g.GROUPID in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0))
admin-report.detail-user-maintenance.delete-user.csv.specific-ccra=and U.groupccraid = {0}
admin-report.detail-user-maintenance.delete-user.csv.specific.monthlyplan=and (g.parentgroupid in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0) or g.GROUPID in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0))
admin-report.detail-user-maintenance.delete-user.csv.specific=and U.groupaiid = {0}
admin-report.detail-user-maintenance.delete-user.csv-ccra=SELECT '{4}' as "Report Date", '{5}' as "Requested By", '{9}' as "As Of Date",(select g.AICODE from spm_group g where g.GROUPID = u.groupaiid) as "Member Code",case when u.deleted = 0 then u.userid else case when (len(u.userid)-(len(u.uid)+1)  <= 0)  then u.userid else substring(u.userid,1,len(u.userid)-(len(u.uid)+1)) end end  as USERID, T.user_name as "User Name", case when (select GROUP_NAME_EN from spm_group sg inner join spm_user su on sg.groupid = su.groupid where su.GROUPAIID <> su.groupid and su.uid = t.uid) IS not null then GS.GROUP_NAME_EN else '-' end AS BRANCH,dbo.convert_datetime(U.CREATEDDATE) AS CREATEDDATE, dbo.convert_datetime(T.ACCESS_DATE) AS "DELETED DATE" FROM TRANS_DETAIL_SYSTEM_ACCESS T(NOLOCK) INNER JOIN SPM_USER U (NOLOCK) ON T.UID = U.UID INNER JOIN SPM_GROUP G ON U.GROUPID = G.GROUPID INNER JOIN (select * from  spm_group_snapshot b where transactionid in ( select c.MAX_TRANSACTIONID from (select a.GROUPID,MAX(a.TRANSACTIONID) MAX_TRANSACTIONID from SPM_GROUP_SNAPSHOT a where a.CREATEDDATE <= DATEADD(DAY,1,convert(datetime, '{0}', 101)) GROUP BY a.GROUPID) c ) ) GS ON GS.GROUPID = u.GROUPID WHERE t.ACTION_TYPE = 2 and T.ACTIONID = 4 and (t.ACCESS_DATE >= (SELECT ISNULL(MAX(ACCESS_DATE),0) from TRANS_DETAIL_SYSTEM_ACCESS tt (nolock) where t.UID = tt.uid and  Tt.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime,'{0}' , 101)) and Tt.ACCESS_DATE >= dateadd(year, -1, convert(datetime, '{0}' )))) and  T.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) and T.ACCESS_DATE >= dateadd(year, -1, convert(datetime, '{0}', 101 )) {1} {2} {3} ORDER BY {8},{6} ASC, {7} ,U.CREATEDDATE
admin-report.detail-user-maintenance.delete-user.csv=SELECT '{4}' as "Report Date", '{5}' as "Requested By", '{9}' as "As Of Date",(select g.AICODE from spm_group g where g.GROUPID = u.groupaiid) as "Member Code",case when u.deleted = 0 then u.userid else case when (len(u.userid)-(len(u.uid)+1)  <= 0)  then u.userid else substring(u.userid,1,len(u.userid)-(len(u.uid)+1)) end end  as USERID, T.user_name as "User Name", case when (select GROUP_NAME_EN from spm_group sg inner join spm_user su on sg.groupid = su.groupid where su.GROUPAIID <> su.groupid and su.uid = t.uid) IS not null then GS.GROUP_NAME_EN else '-' end AS BRANCH,dbo.convert_datetime(U.CREATEDDATE) AS CREATEDDATE, dbo.convert_datetime(T.ACCESS_DATE) AS "DELETED DATE" FROM TRANS_DETAIL_SYSTEM_ACCESS T(NOLOCK) INNER JOIN SPM_USER U (NOLOCK) ON T.UID = U.UID INNER JOIN SPM_GROUP G ON U.GROUPID = G.GROUPID INNER JOIN (select * from  spm_group_snapshot b where transactionid in ( select c.MAX_TRANSACTIONID from (select a.GROUPID,MAX(a.TRANSACTIONID) MAX_TRANSACTIONID from SPM_GROUP_SNAPSHOT a where a.CREATEDDATE <= DATEADD(DAY,1,convert(datetime, '{0}', 101)) GROUP BY a.GROUPID) c ) ) GS ON GS.GROUPID = u.GROUPID WHERE t.ACTION_TYPE = 2 and T.ACTIONID = 4 and (t.ACCESS_DATE >= (SELECT ISNULL(MAX(ACCESS_DATE),0) from TRANS_DETAIL_SYSTEM_ACCESS tt (nolock) where t.UID = tt.uid and  Tt.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime,'{0}' , 101)) and Tt.ACCESS_DATE >= dateadd(year, -1, convert(datetime, '{0}' )))) and  T.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) and T.ACCESS_DATE >= dateadd(year, -1, convert(datetime, '{0}', 101 )) {1} {2} {3} ORDER BY {8},{6} ASC, {7} ,U.CREATEDDATE
admin-report.detail-user-maintenance.delete-user.csv.branch=AND U.GROUPID in({0})
admin-report.detail-user-maintenance.delete-user.csv.user=AND U.UID = {0}

admin-report.detail-user-maintenance.disable-user.csv.specific-allmember=AND U.GROUPAIID <> 1
admin-report.detail-user-maintenance.disable-user.csv.specific-ccra-allmember=and U.groupaiid = 1
admin-report.detail-user-maintenance.disable-user.csv.specific-ccra-nonmember=and U.groupid = {0}
admin-report.detail-user-maintenance.disable-user.csv.specific-ccra.monthlyplan=and (g.parentgroupid in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0) or g.GROUPID in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0))
admin-report.detail-user-maintenance.disable-user.csv.specific-ccra=and U.groupccraid = {0}
admin-report.detail-user-maintenance.disable-user.csv.specific.monthlyplan=and (g.parentgroupid in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0) or g.GROUPID in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0))
admin-report.detail-user-maintenance.disable-user.csv.specific=and U.groupaiid = {0}
admin-report.detail-user-maintenance.disable-user.csv.branch=AND U.GROUPID in ({0})
admin-report.detail-user-maintenance.disable-user.csv.user=AND U.UID = {0}
admin-report.detail-user-maintenance.disable-user.csv-ccra=SELECT '{4}' as "Report Date", '{5}' as "Requested By", '{9}' as "As Of Date",(select g.AICODE from spm_group g where g.GROUPID = u.groupaiid) as "Member Code", case when u.deleted = 0 then u.userid else case when (len(u.userid)-(len(u.uid)+1)  <= 0)  then u.userid else substring(u.userid,1,len(u.userid)-(len(u.uid)+1)) end end  as USERID, T.user_name as "User Name", case when (select GROUP_NAME_EN from spm_group sg inner join spm_user su on sg.groupid = su.groupid where su.GROUPAIID <> su.groupid and su.uid = t.uid) IS not null then GS.GROUP_NAME_EN else '-' end AS BRANCH,dbo.convert_datetime(U.CREATEDDATE) AS CREATEDDATE, dbo.convert_datetime(T.ACCESS_DATE) AS "DISABLED DATE" FROM TRANS_DETAIL_SYSTEM_ACCESS T(NOLOCK) INNER JOIN SPM_USER U (NOLOCK) ON T.UID = U.UID INNER JOIN SPM_GROUP G ON U.GROUPID = G.GROUPID INNER JOIN (select * from  spm_group_snapshot b where transactionid in ( select c.MAX_TRANSACTIONID from (select a.GROUPID,MAX(a.TRANSACTIONID) MAX_TRANSACTIONID from SPM_GROUP_SNAPSHOT a where a.CREATEDDATE <= DATEADD(DAY,1,convert(datetime, '{0}', 101)) GROUP BY a.GROUPID) c ) ) GS ON GS.GROUPID = u.GROUPID WHERE ((t.ACTION_TYPE = 2 AND T.ACTIONID = 1) OR (T.ACTIONID = 1 AND T.ACTION_TYPE = 3)) and  T.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) and T.ACCESS_DATE >= dateadd(year, -1, convert(datetime, '{0}', 101 ))  {1} {2} {3} ORDER BY {8},{6} ASC, {7} ,U.CREATEDDATE
admin-report.detail-user-maintenance.disable-user.csv=SELECT '{4}' as "Report Date", '{5}' as "Requested By", '{9}' as "As Of Date",(select g.AICODE from spm_group g where g.GROUPID = u.groupaiid) as "Member Code", case when u.deleted = 0 then u.userid else case when (len(u.userid)-(len(u.uid)+1)  <= 0)  then u.userid else substring(u.userid,1,len(u.userid)-(len(u.uid)+1)) end end  as USERID, T.user_name as "User Name", case when (select GROUP_NAME_EN from spm_group sg inner join spm_user su on sg.groupid = su.groupid where su.GROUPAIID <> su.groupid and su.uid = t.uid) IS not null then GS.GROUP_NAME_EN else '-' end AS BRANCH,dbo.convert_datetime(U.CREATEDDATE) AS CREATEDDATE, dbo.convert_datetime(T.ACCESS_DATE) AS "DISABLED DATE" FROM TRANS_DETAIL_SYSTEM_ACCESS T(NOLOCK) INNER JOIN SPM_USER U (NOLOCK) ON T.UID = U.UID INNER JOIN SPM_GROUP G ON U.GROUPID = G.GROUPID INNER JOIN (select * from  spm_group_snapshot b where transactionid in ( select c.MAX_TRANSACTIONID from (select a.GROUPID,MAX(a.TRANSACTIONID) MAX_TRANSACTIONID from SPM_GROUP_SNAPSHOT a where a.CREATEDDATE <= DATEADD(DAY,1,convert(datetime, '{0}', 101)) GROUP BY a.GROUPID) c ) ) GS ON GS.GROUPID = u.GROUPID WHERE ((t.ACTION_TYPE = 2 AND T.ACTIONID = 1) OR (T.ACTIONID = 1 AND T.ACTION_TYPE = 3)) and  T.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) and T.ACCESS_DATE >= dateadd(year, -1, convert(datetime, '{0}', 101 ))  {1} {2} {3} ORDER BY {8},{6} ASC, {7} ,U.CREATEDDATE

admin-report.detail-user-maintenance.summary.csv.specific-allmember=AND U.GROUPAIID <> 1
admin-report.detail-user-maintenance.summary.csv.specific-ccra-allmember=and U.groupaiid = 1
admin-report.detail-user-maintenance.summary.csv.specific-ccra-nonmember=AND U.GROUPID = {0}
admin-report.detail-user-maintenance.summary.csv.specific-ccra.monthlyplan=and (g.parentgroupid in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0) or g.GROUPID in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0))
admin-report.detail-user-maintenance.summary.csv.specific-ccra=and U.groupccraid = {0}
admin-report.detail-user-maintenance.summary.csv.specific.monthlyplan=and (g.parentgroupid in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0) or g.GROUPID in(select groupid from spm_group where MONTHLY_PLAN in({0}) and disabled = 0 and deleted = 0))
admin-report.detail-user-maintenance.summary.csv.specific=AND U.groupaiid = {0}
admin-report.detail-user-maintenance.summary.csv.branch=AND U.GROUPID in ({0})
admin-report.detail-user-maintenance.summary.csv.user=AND U.UID = {0}
admin-report.detail-user-maintenance.summary.csv-ccra=SELECT  '{4}' as "Report Date", '{5}' as "Requested By", '{9}' as "As Of Date", (select g.AICODE from spm_group g where g.GROUPID = u.groupaiid) as "Member Code",case when u.deleted = 0 then u.userid else case when (len(u.userid)-(len(u.uid)+1)  <= 0)  then u.userid else substring(u.userid,1,len(u.userid)-(len(u.uid)+1)) end end  as USERID, T.user_name as "User Name", case when (select GROUP_NAME_EN from spm_group sg inner join spm_user su on sg.groupid = su.groupid where su.GROUPAIID <> su.groupid and su.uid = t.uid) IS not null then GS.GROUP_NAME_EN else '-' end AS BRANCH, dbo.convert_datetime(T.CREATEDDATE) AS CREATEDDATE, dbo.convert_datetime(T.LASTUPDATEDDATE) AS LASTUPDATEDDATE, replace(replace(T.PERMISSION,'|',nchar(13)),'~',NCHAR(9)+ '- ') AS PERMISSION FROM TRAN_PRIVILEGE T (NOLOCK) INNER JOIN SPM_USER U (NOLOCK) ON T.UID = U.UID INNER JOIN SPM_GROUP G ON T.GROUPID =  G.GROUPID  INNER JOIN (select * from  spm_group_snapshot b where transactionid in ( select c.MAX_TRANSACTIONID from (select a.GROUPID,MAX(a.TRANSACTIONID) MAX_TRANSACTIONID from SPM_GROUP_SNAPSHOT a where a.CREATEDDATE <= DATEADD(DAY,1,convert(datetime, '{0}', 101)) GROUP BY a.GROUPID) c ) ) GS ON GS.GROUPID = u.GROUPID  WHERE t.LASTUPDATEDDATE >= (SELECT isnull(MAX(LASTupdateddate),0) from TRAN_PRIVILEGE tt (nolock) where t.UID = tt.uid  AND tt.lastupdateddate <= DATEADD(DAY,1,convert(datetime, '{0}', 101))) and t.LASTUPDATEDDATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) AND t.LASTUPDATEDDATE >=  (SELECT dateadd(day, 0, ISNULL(MAX(ACCESS_DATE),0))  from TRANS_DETAIL_SYSTEM_ACCESS tt (nolock) where t.UID = tt.uid  AND Tt.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) and ((ACTION_TYPE = 2 AND (ACTIONID = 1 OR ACTIONID = 4)) OR (ACTIONID = 1 AND ACTION_TYPE = 3)))  {1} {2} {3} ORDER BY {8},{6} ASC, {7} ,U.CREATEDDATE
admin-report.detail-user-maintenance.summary.csv=SELECT  '{4}' as "Report Date", '{5}' as "Requested By", '{9}' as "As Of Date", (select g.AICODE from spm_group g where g.GROUPID = u.groupaiid) as "Member Code", case when u.deleted = 0 then u.userid else case when (len(u.userid)-(len(u.uid)+1)  <= 0)  then u.userid else substring(u.userid,1,len(u.userid)-(len(u.uid)+1)) end end  as USERID, T.user_name  as "User Name", case when (select GROUP_NAME_EN from spm_group sg inner join spm_user su on sg.groupid = su.groupid where su.GROUPAIID <> su.groupid and su.uid = t.uid) IS not null then GS.GROUP_NAME_EN else '-' end AS BRANCH, dbo.convert_datetime(T.CREATEDDATE) AS CREATEDDATE, dbo.convert_datetime(T.LASTUPDATEDDATE) AS LASTUPDATEDDATE, replace(replace(T.PERMISSION,'|',nchar(13)),'~',NCHAR(9)+ '- ') AS PERMISSION FROM TRAN_PRIVILEGE T (NOLOCK) INNER JOIN SPM_USER U (NOLOCK) ON T.UID = U.UID INNER JOIN SPM_GROUP G ON T.GROUPID =  G.GROUPID  INNER JOIN (select * from  spm_group_snapshot b where transactionid in ( select c.MAX_TRANSACTIONID from (select a.GROUPID,MAX(a.TRANSACTIONID) MAX_TRANSACTIONID from SPM_GROUP_SNAPSHOT a where a.CREATEDDATE <= DATEADD(DAY,1,convert(datetime, '{0}', 101)) GROUP BY a.GROUPID) c ) ) GS ON GS.GROUPID = u.GROUPID WHERE t.LASTUPDATEDDATE >= (SELECT isnull(MAX(LASTupdateddate),0) from TRAN_PRIVILEGE tt (nolock) where t.UID = tt.uid  AND tt.lastupdateddate <= DATEADD(DAY,1,convert(datetime, '{0}', 101))) and t.LASTUPDATEDDATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) AND t.LASTUPDATEDDATE >=  (SELECT dateadd(day, 0, ISNULL(MAX(ACCESS_DATE),0))  from TRANS_DETAIL_SYSTEM_ACCESS tt (nolock) where t.UID = tt.uid  AND Tt.ACCESS_DATE <=  DATEADD(DAY,1,convert(datetime, '{0}', 101)) and ((ACTION_TYPE = 2 AND (ACTIONID = 1 OR ACTIONID = 4)) OR (ACTIONID = 1 AND ACTION_TYPE = 3)))  {1} {2} {3} ORDER BY {8},{6} ASC, {7} ,U.CREATEDDATE



#ALERT
alert.insert.register-alert=INSERT INTO prod_register (transactionid, expenseid, uid, groupaiid, groupid, product_type, cbuid, date_start, date_stop, reasoncode, airefcode1, airefcode2, airefcode3, hkbrc, hkci, other_reg_no, place_of_reg, company_name_en, company_name_lo) SELECT {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, N'{10}', N'{11}', N'{12}', hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo FROM master_dunstable (nolock) WHERE cbuid = {6}
alert.insert.register-alert-bulk=INSERT INTO prod_register (transactionid, expenseid, uid, groupaiid, groupid, product_type, cbuid, date_start, date_stop, reasoncode, airefcode1, airefcode2, airefcode3, hkbrc, hkci, other_reg_no, place_of_reg, company_name_en, company_name_lo, disabled_flag) SELECT {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, N'{10}', N'{11}', N'{12}', hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo, '1'  FROM master_dunstable (nolock) WHERE cbuid = {6}
alert.select.register-alert=SELECT U.USERID FROM PROD_REGISTER P (nolock) INNER JOIN SPM_USER U (nolock) ON P.UID = U.UID WHERE ((P.DISABLED_FLAG = 0 AND p.auto_renew = 1 AND p.uid <> {3}) OR (p.disabled_flag = 0 AND p.uid = {3})) AND P.CBUID = {0} AND P.GROUPAIID = {1} AND P.PRODUCT_TYPE = {2}
alert.select.check-registered-alert=SELECT top 1 UID FROM PROD_REGISTER (nolock) WHERE DISABLED_FLAG = 0 AND CBUID = {0} AND UID = {1} AND PRODUCT_TYPE = {2}
alert.update.expense=update spm_expense set productusage = {0}, disabled = 1 where expenseid = {1};
alert.update.cancel-auto-renew=UPDATE prod_register SET auto_renew = {0}, updateddate = {1} WHERE monitorid = {2}
alert.update.reactivate-previous-subscription=UPDATE prod_register SET auto_renew = 1, updateddate = {0} WHERE disabled_flag = 0 AND cbuid = {1} AND uid = {2} AND product_type = {3} AND auto_renew = 0
alert.update.unregister-enquiry-alert=UPDATE prod_register SET disabled_flag = 1, wait_disabled_flag = 1, wait_disabled_date = getdate(), disabled_date = getdate(), date_stop = getdate() WHERE monitorid = {0}
alert.select.pending-enquiry-alert=SELECT current_accum FROM prod_register (nolock) WHERE  monitorid = {0}
alert.insert.transaction=INSERT INTO spm_transaction (sessionid, uid, groupaiid, groupid, objectid, channel, amountresult, createdby, updatedby) VALUES ({0}, {1}, {2}, {3}, {4}, '{5}', 0, {1}, {1})
alert.select.register-monitor-id=SELECT monitorid FROM prod_register (nolock) WHERE disabled_flag = 0 AND cbuid = {0} AND uid = {1} AND product_type = {2}
#alert.update.expense-register=UPDATE spm_expense set brc_no = (SELECT brc_no FROM prod_demographic (nolock) WHERE groupid = {0} and cbuid = {1}), ci_no = (SELECT ci_no FROM prod_demographic (nolock) WHERE groupid = {0} and cbuid = {1}), other_reg_no = (SELECT other_reg_no FROM prod_demographic (nolock) WHERE groupid = {0} and cbuid = {1}), place_of_reg = (SELECT place_of_reg FROM prod_demographic (nolock) WHERE groupid = {0} and cbuid = {1}), customer_no = (SELECT customer_no FROM prod_demographic (nolock) WHERE groupid = {0} and cbuid = {1}), loc_branch_id = (SELECT loc_branch_id FROM prod_credit (nolock) WHERE groupid = {0} and cbuid = {1}), acc_mnger_code = (SELECT acc_mnger_code FROM prod_credit (nolock) WHERE groupid = {0} and cbuid = {1}), productusage = {2}, unitcharge = (SELECT costofobject FROM spm_object (nolock) WHERE objectid = {2}) WHERE expenseid = {3}
#alert.update.expense-register=UPDATE spm_expense set brc_no = p_brc_no, ci_no = p_ci_no, other_reg_no = p_other_reg_no, customer_no = p_customer_no, loc_branch_id = p_loc_branch_id, acc_mnger_code = p_acc_mnger_code, unitcharge = p_unitcharge from (select brc_no as p_brc_no, ci_no as p_ci_no, other_reg_no as p_other_reg_no, customer_no as p_customer_no, loc_branch_id as p_loc_branch_id, acc_mnger_code as p_acc_mnger_code,(SELECT costofobject FROM spm_object (nolock) WHERE objectid = {2}) as p_unitcharge from prod_demographic pd, prod_credit pc where pd.groupid = pc.groupid and pd.cbuid = pc.cbuid and pd.groupid = {0} and pd.cbuid = {1}) as result where expenseid = {3}
alert.update.expense-register=UPDATE spm_expense set brc_no = p_brc_no, ci_no = p_ci_no, other_reg_no = p_other_reg_no, customer_no = p_customer_no, loc_branch_id = p_loc_branch_id, acc_mnger_code = p_acc_mnger_code, unitcharge = p_unitcharge, submission_flag = {4}, revoc_effect_date = {5} from (select brc_no as p_brc_no, ci_no as p_ci_no, other_reg_no as p_other_reg_no, customer_no as p_customer_no, loc_branch_id as p_loc_branch_id, acc_mnger_code as p_acc_mnger_code,(SELECT costofobject FROM spm_object (nolock) WHERE objectid = {2}) as p_unitcharge from prod_demographic pd (NOLOCK), prod_credit pc (NOLOCK) where pd.groupid = pc.groupid and pd.cbuid = pc.cbuid and pd.groupid = {0} and pd.cbuid = {1}) as result where expenseid = {3}
alert.update.product-deliver=UPDATE mal_productdeliver SET objectid = {0}, matchkey = {1} WHERE transactionid = {2}
alert.select.submit-data=SELECT revoc_effect_date FROM prod_demographic_flag (nolock) WHERE groupid = {0} AND cbuid = {1}
alert.update.expense-submit-data=UPDATE spm_expense SET submission_flag = {0}, revoc_effect_date = {1} WHERE expenseid = {2}
alert.select.check-disable-autorenew=SELECT top 1 UID FROM PROD_REGISTER (nolock) WHERE DISABLED_FLAG = 0 AND AUTO_RENEW = 0 AND CBUID = {0} AND UID = {1} AND PRODUCT_TYPE = {2}

#SEARCH
search.name.local=select top {0} master_name_local.duns_no, master_name_local.local_name company_name_lo, master_dunstable.company_name_eng company_name_en, name_type, district, master_name_local.cbuid, master_dunstable.disputestatus, master_dunstable.disputedate, master_dunstable.disputereason, master_dunstable.disputeby from master_name_local with (nolock), master_dunstable with (nolock) where master_dunstable.duns_no = master_name_local.duns_no and local_name >= N'{1}' order by local_name asc
search.name.english=select top {0} master_name_english.duns_no, master_name_english.english_name company_name_en, master_dunstable.company_name_lo company_name_lo, name_type, district, master_name_english.cbuid, master_dunstable.disputestatus, master_dunstable.disputedate, master_dunstable.disputereason, master_dunstable.disputeby from master_name_english with (nolock), master_dunstable with (nolock) where master_name_english.duns_no = master_dunstable.duns_no and master_name_english.english_name >= '{1}' order by english_name asc
search.id.brc=select duns_no, dbhk_export_date, hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo, trade_name_eng, trade_name_lo, prev_name_eng, prev_name_lo, district_eng, district_lo, cbuid, disputestatus, disputedate, disputereason, disputeby from master_dunstable with (nolock) where hkbrc = '{0}' order by cbuid desc
search.id.ci=select duns_no, dbhk_export_date, hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo, trade_name_eng, trade_name_lo, prev_name_eng, prev_name_lo, district_eng, district_lo, cbuid, disputestatus, disputedate, disputereason, disputeby from master_dunstable with (nolock) where hkci = '{0}' order by cbuid desc
search.id.other-without-placereg=select top {0} duns_no, dbhk_export_date, hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo, trade_name_eng, trade_name_lo, prev_name_eng, prev_name_lo, district_eng, district_lo, cbuid, disputestatus, disputedate, disputereason, disputeby from master_dunstable with (nolock) where other_reg >= '{1}' order by other_reg asc, cbuid desc
search.id.other-with-placereg=select top {0} duns_no, dbhk_export_date, hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo, trade_name_eng, trade_name_lo, prev_name_eng, prev_name_lo, district_eng, district_lo, cbuid, disputestatus, disputedate, disputereason, disputeby from master_dunstable with (nolock) where other_reg >= '{1}' and (other_reg_place = '{2}' or other_reg_place is null or other_reg_place = '') order by other_reg asc, cbuid desc
search.id.other-with-placereg.exactly=select top {0} duns_no, dbhk_export_date, hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo, trade_name_eng, trade_name_lo, prev_name_eng, prev_name_lo, district_eng, district_lo, cbuid, disputestatus, disputedate, disputereason, disputeby from master_dunstable with (nolock) where other_reg = '{1}' and other_reg_place = '{2}' order by other_reg asc, cbuid desc
search.id.other-without-placereg.exactly=select top {0} duns_no, dbhk_export_date, hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo, trade_name_eng, trade_name_lo, prev_name_eng, prev_name_lo, district_eng, district_lo, cbuid, disputestatus, disputedate, disputereason, disputeby from master_dunstable with (nolock) where other_reg = '{1}' order by other_reg asc, cbuid desc
search.hasorderreport=SELECT top 1 1 FROM spm_expense exps with (nolock) WHERE exps.cbuid = ? AND exps.groupaiid = ? AND exps.productusage = ? AND exps.createddate > ? and exps.disabled = 0
#search.haslocalrecord.demographic=SELECT CBUID, GROUPID, ADDRESS_LO_1, NAME_LO, TRADE_NAME_LO, PREV_NAME_LO, SHAREHOLDER_NAME_LO FROM PROD_DEMOGRAPHIC WHERE ( (ADDRESS_LO_1 IS NOT NULL AND ADDRESS_LO_1 <> '[Record removed]') OR (NAME_LO IS NOT NULL AND NAME_LO <> '[Record removed]') OR (TRADE_NAME_LO IS NOT NULL AND TRADE_NAME_LO <> '[Record removed]') OR (PREV_NAME_LO IS NOT NULL AND  PREV_NAME_LO <> '[Record removed]') OR (SHAREHOLDER_NAME_LO IS NOT NULL AND  SHAREHOLDER_NAME_LO <> '[Record removed]')) AND CBUID = ?
#search.haslocalrecord.demographic=SELECT TOP 3  demo.CBUID CBUID, demo.GROUPID GROUPID, demo.ADDRESS_LO_1 ADDRESS_LO_1, demo.NAME_LO NAME_LO, demo.TRADE_NAME_LO TRADE_NAME_LO, demo.PREV_NAME_LO PREV_NAME_LO, demo.SHAREHOLDER_NAME_LO SHAREHOLDER_NAME_LO FROM prod_demographic demo with (nolock), prod_credit credit with (nolock), prod_demographic_flag demoflag with (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = ? AND demo.period >= ? AND ( (demo.ADDRESS_LO_1 IS NOT NULL AND demo.ADDRESS_LO_1 <> '[Record removed]') OR (demo.NAME_LO IS NOT NULL AND demo.NAME_LO <> '[Record removed]') OR (demo.TRADE_NAME_LO IS NOT NULL AND demo.TRADE_NAME_LO <> '[Record removed]') OR (demo.PREV_NAME_LO IS NOT NULL AND  demo.PREV_NAME_LO <> '[Record removed]') OR (demo.SHAREHOLDER_NAME_LO IS NOT NULL AND  demo.SHAREHOLDER_NAME_LO <> '[Record removed]'))AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE()      OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)) DESC
search.haslocalrecord.demographic=SELECT TOP 3  demo.CBUID CBUID, demo.GROUPID GROUPID, demo.ADDRESS_LO_1 ADDRESS_LO_1, demo.NAME_LO NAME_LO, demo.TRADE_NAME_LO TRADE_NAME_LO, demo.PREV_NAME_LO PREV_NAME_LO, demo.SHAREHOLDER_NAME_LO SHAREHOLDER_NAME_LO FROM prod_demographic demo with (nolock), prod_credit credit with (nolock), prod_demographic_flag demoflag with (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = ? AND demo.period > ? AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE()      OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)) DESC
search.haslocalrecord.plaintiff-defendant=SELECT PLAINTIFF.ACTIONNO, PLAINTIFF.PLAINTIFF_1_NAT, DEFENDANT.GIVEN_NAME_NAT, DEFENDANT.SURNAME_NAT FROM PROD_DEFENDANT DEFENDANT (nolock) INNER JOIN PROD_PLAINTIFF PLAINTIFF (nolock) ON DEFENDANT.ACTIONNO = PLAINTIFF.ACTIONNO WHERE DEFENDANT.CBUID = ? AND DEFENDANT.ACTIONDATE > ? AND ( (DEFENDANT.SURNAME_NAT IS NOT NULL AND DEFENDANT.SURNAME_NAT <> '[Record removed]')  OR (DEFENDANT.GIVEN_NAME_NAT IS NOT NULL AND DEFENDANT.GIVEN_NAME_NAT <> '[Record removed]')  OR (PLAINTIFF.PLAINTIFF_1_NAT IS NOT NULL AND PLAINTIFF.PLAINTIFF_1_NAT <> '[Record removed]'))
search.haslocalrecord.other-defendant=SELECT GIVEN_NAME_NAT, SURNAME_NAT FROM PROD_DEFENDANT (nolock) WHERE ACTIONNO = ? AND ACTIONDATE > ? AND ( (GIVEN_NAME_NAT IS NOT NULL AND GIVEN_NAME_NAT <> '[Record removed]'))
search.haslocalrecord.shareholdernamelo=select top 1 shareholder_name_lo from prod_demographic where cbuid = ? and shareholder_name_lo is not null and ltrim(shareholder_name_lo) <> ''
#search.suspected.abnormal.data=SELECT CBUID, GROUPID, NAME_LO, NAME_EN, COM_TYPE, BRC_NO, CI_NO, OTHER_REG_NO, PLACE_OF_REG, CUSTOMER_NO FROM PROD_DEMOGRAPHIC WHERE cbuid = ? and groupid = ?
#search.suspected.abnormal.data=select prod.cbuid, prod.groupid, prod.com_type, mas.hkbrc, mas.hkci , mas.other_reg, mas.other_reg_place, prod.customer_no, mas.company_name_eng, mas.company_name_lo from master_dunstable as mas (nolock), prod_demographic as prod(nolock) where mas.cbuid = prod.cbuid and prod.cbuid = ? and prod.groupid = ?
#search.suspected.abnormal.data=select a.cbuid, b.groupid, b.com_type, a.hkbrc, a.hkci, a.other_reg, a.other_reg_place, b.customer_no, a.company_name_eng, a.company_name_lo from (select cbuid, hkbrc, hkci, other_reg, other_reg_place, company_name_eng, company_name_lo from master_dunstable where cbuid= ?) a left outer join (select cbuid, groupid, com_type, customer_no from prod_demographic where cbuid =? and groupid=?) b on a.cbuid = b.cbuid
#search.suspected.abnormal.data.blank=select top 1 demo.com_type,demo.customer_no ,max(isnull(rev_facility_limit,0)+ isnull(non_rev_facility_limit,0) +isnull(cont_facility_limit,0)+ isnull(hp_facility_limit,0)) as sum_faclimit from prod_demographic as demo (nolock),prod_credit as credit(nolock) where demo.cbuid = credit.cbuid and demo.groupid = credit.groupid and demo.cbuid = ? group by demo.com_type,demo.customer_no
search.suspected.abnormal.data=select a.cbuid, b.groupid, b.com_type, a.hkbrc, a.hkci, a.other_reg, a.other_reg_place, b.customer_no, a.company_name_eng, a.company_name_lo from master_dunstable a (nolock) left outer join prod_demographic b (nolock) on a.cbuid = b.cbuid  and b.groupid = ? where a.cbuid = ?
#REPORT REQUEST
report.request.report-header=select TOP 1 a.airefcode1, a.airefcode2, a.airefcode3, a.reasoncode, b.productusage, b.responsetime, a.namesearch, a.hkbrc, a.hkci, a.other_reg_no, a.place_of_reg, c.company_name_eng, c.hkbrc, c.hkci, c.other_reg, c.other_reg_place, d.userid, e.logindate from mal_productdeliver a (nolock), spm_expense b (nolock) left join master_dunstable c (nolock) on b.cbuid = c.cbuid, spm_user d, spm_session e where a.expenseid = b.expenseid and a.expenseid = {0} and b.uid = d.uid and b.sessionid = e.sessionid and b.productusage = a.objectid order by a.createddate desc
report.request.report-type=select b.objectid, b.objectlabel, b.objectdesc from spm_expense a (nolock), spm_object b (nolock) where a.productusage = b.objectid and a.expenseid = {0}
report.request.report=select productobject from mal_productdeliver_data with(nolock) where expenseid = {0} and objecttype = {1} order by objectnumber

#BULK REQUEST
bulk.request.select-mail-product-deliver=select a.bthproductdeliverid, a.transactionid, a.expenseid, a.rownumber, a.requesttype, a.hkbrc, a.hkci, a.other_reg_no, a.place_of_reg, a.namesearch, a.reasoncode, a.airefcode1, a.airefcode2, a.airefcode3, a.objectid, a.deleted, a.err_code, a.err_desc, a.within7days, b.expenseid, b.cbuid, b.createdby, b.createddate, b.disabled, b.flagcharge, b.flagexpense, b.flagresult, b.groupaiid, b.groupid, b.productusage, b.requesttime, b.responsetime, b.acc_mnger_code, b.customer_no, b.brc_no, b.ci_no, b.loc_branch_id, b.other_reg_no, b.place_of_reg, b.company_name_en, b.company_name_lo, b.sessionid, b.unitcharge, b.uid, b.updatedby, b.updateddate, c.company_name_eng, c.hkbrc, c.hkci, c.other_reg, c.other_reg_place from mal_productdeliver a (nolock) left join spm_expense b (nolock) on a.expenseid = b.expenseid left join master_dunstable c (nolock) on b.cbuid = c.cbuid where a.bthproductdeliverid = ? order by a.rownumber
bulk.request.select-bulk-request-master=select bthproductdeliverid, uid, sessionid, groupaiid, groupid, fileoutputname, fileinputname,submiteddate, responsedate, filesize, fileoutputobject, flagdelete, createdby, createddate, updatedby, updateddate, err_code, err_desc, processstarteddate,processstatus from mal_bth_productdeliver (nolock) where bthproductdeliverid = ?
bulk.request.select-bulk-request-detail=select a.airefcode1, a.airefcode2, a.airefcode3, a.err_code, a.err_desc, a.hkbrc, a.hkci, a.namesearch, a.other_reg_no, a.place_of_reg, a.objectid, a.reasoncode, a.requesttype, a.rownumber, a.transactionid, a.expenseid, b.cbuid, b.company_name_en, b.company_name_lo, b.requesttime, b.responsetime from mal_productdeliver a (nolock) left outer join spm_expense b (nolock) on a.expenseid = b.expenseid where a.bthproductdeliverid = ? order by a.rownumber

#REPORT CONFIG
report.year-scope=2
report.revocation-of-consent-year-scope=2
report.cover-page.ai-ordered-list.month=12

report.ai-prefix=AI#

#DEMOGRAPHIC
report.statement.demographic=SELECT demo.* FROM prod_demographic demo (nolock), prod_credit credit (nolock), prod_demographic_flag demoflag (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = ? AND demo.groupid = ?
report.statement.demographic.limityear=SELECT demo.cbuid, demo.groupid FROM prod_demographic demo (nolock), prod_credit credit (nolock), prod_demographic_flag demoflag (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = ? AND demo.period > ?
report.statement.demographic.top3limityear=SELECT TOP 3 demo.* FROM prod_demographic demo (nolock), prod_credit credit (nolock), prod_demographic_flag demoflag (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = ? AND demo.period > ? AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)) DESC
report.statement.demographic.selectlocallanguagerecord=SELECT CBUID, GROUPID FROM PROD_DEMOGRAPHIC (nolock) WHERE (ADDRESS_LO_1 IS NOT NULL OR NAME_LO IS NOT NULL OR TRADE_NAME_LO IS NOT NULL OR PREV_NAME_LO IS NOT NULL OR SHAREHOLDER_NAME_LO IS NOT NULL) AND CBUID = ?
report.statement.demographic.selectlocallanguagerecordnew=SELECT cbuid, groupid, address_lo_1, name_lo, trade_name_lo, prev_name_lo, shareholder_name_lo FROM PROD_DEMOGRAPHIC (nolock) WHERE (ADDRESS_LO_1 IS NOT NULL OR NAME_LO IS NOT NULL OR TRADE_NAME_LO IS NOT NULL OR PREV_NAME_LO IS NOT NULL OR SHAREHOLDER_NAME_LO IS NOT NULL) AND CBUID = ?

#COURT DEFENDANT
report.statement.court-defendant=SELECT * FROM prod_defendant (nolock) WHERE actionno = ? AND defno = ?
report.statement.court-defendant.findbycbuidlimityear=SELECT * FROM prod_defendant defendant (nolock) INNER JOIN prod_plaintiff plaintiff (nolock) ON defendant.actionno = plaintiff.actionno WHERE defendant.cbuid = ? AND defendant.actiondate > ? AND (ISNULL(defendant.given_name_eng, '') <> '' OR ISNULL(defendant.surname_eng, '') <> '' OR ISNULL(defendant.given_name_nat, '') <> '' OR ISNULL(defendant.surname_nat, '') <> '') AND (ISNULL(plaintiff.actiondesc_text_eng, '') <> ''/* OR plaintiff.actiondesc_text_chn IS NOT NULL*/) AND (ISNULL(plaintiff.plaintiff_1_eng, '') <> '' OR ISNULL(plaintiff.plaintiff_1_nat, '') <> '') AND (ISNULL(plaintiff.file_number, '') <> '') AND (ISNULL(plaintiff.causeofaction_text_eng, '') <> '' OR ISNULL(plaintiff.causeofaction_text_chn, '') <> '') ORDER BY defendant.actionno
report.statement.court-defendant.findbyactionno=SELECT TOP 3 * FROM prod_defendant defendant (nolock) WHERE actionno = ? AND (defendant.given_name_eng IS NOT NULL OR defendant.surname_eng IS NOT NULL OR defendant.given_name_nat IS NOT NULL OR defendant.surname_nat IS NOT NULL) ORDER BY actionno

################################################################################
#statement for turning performance 06/09/2004
#all query statement is statement not prepared statement
#LOOKUP TABLE
prevalidation.preparedstatement.reasoncode=SELECT * FROM base_reason (nolock) WHERE type = '{0}'
prevalidation.preparedstatement.placeofregis=SELECT * FROM base_country (nolock)

#OBJECT DETAIL
reportcreator.preparedstatement.objectdetail=SELECT * FROM spm_object obj with (nolock) WHERE obj.objectid = ?
reportcreator.preparedstatement.datas=SELECT data.dataid, data.datadesc, data.datalabel, data.parentdataid FROM spm_product product with (nolock), spm_data data with (nolock) WHERE product.objectid = ? and product.dataid = data.dataid ORDER BY data.dataid

#AI LISTS
reportcreator.preparedstatement.aiorderlist.credit=SELECT demo.cbuid, demo.groupid, credit.loc_branch_id, credit.acc_mnger_code, demo.customer_no, credit.period, spmgroup.aicode, demo.brc_no, demo.ci_no, demo.other_reg_no, demo.place_of_reg, demoflag.revoc_effect_date,  spmgroup.group_name_en, spmgroup.group_name_lo,(ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0)+ ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)+ ISNULL(credit.hp_facility_limit, 0)) total_facility FROM prod_demographic demo with (nolock), prod_credit credit with (nolock), spm_group spmgroup with (nolock), prod_demographic_flag demoflag with (nolock) WHERE demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.groupid = spmgroup.groupid AND demo.cbuid = ? AND demo.period > ? ORDER BY total_facility DESC, credit.period DESC , credit.groupid ASC
reportcreator.preparedstatement.amountPastDueInYears=select case when min(credit.period) is null then 2 else 5 end as years from history_credit  credit (nolock) inner join history_demographic  demo (nolock) on demo.cbuid=credit.cbuid and demo.groupid = credit.groupid  and demo.period = credit.period where credit.cbuid = ? and credit.period > ? and ((amount_due_60_days > 0 and amount_due_60_days is not null) or (amount_due_60_days_revol_fac > 0 and amount_due_60_days_revol_fac is not null) or (amount_due_60_days_non_revol_fac > 0 and amount_due_60_days_non_revol_fac is not null) or (amount_due_60_days_hp_fac > 0 and amount_due_60_days_hp_fac is not null) or (amount_due_60_days_cont_fac > 0 and amount_due_60_days_cont_fac is not null))
reportcreator.preparedstatement.aiorderlist.unload=SELECT g.aicode, g.group_name_en, g.group_name_lo, a.* FROM spm_group g with (nolock), (SELECT un.cbuid, un.groupid, MAX(un.period) AS period, 0 AS total_facility FROM prod_unload_status un with (nolock) WHERE un.cbuid = ? AND un.period > ? AND ( un.optout_flag <> 1 OR un.optout_flag is null ) GROUP BY un.cbuid, un.groupid) a WHERE g.groupid = a.groupid ORDER BY a.period DESC
reportcreator.preparedstatement.aiorderlist.credit.merge=select groupid_merge as groupaiid from prod_ai_merge_detail de (nolock), prod_ai_merge ms (nolock) where de.groupid = ? and de.groupid = ms.groupid and de.asof = ms.asof  and ms.status_merge = 1

#EXECUTIVE SUMMARY
reportcreator.statement.executivesummary.firstreporteddate=SELECT TOP 1 demoflag.*, demo.name_en, demo.name_lo FROM prod_demographic_flag demoflag with (nolock), prod_demographic demo with (nolock), prod_credit credit with (nolock) WHERE demoflag.cbuid = demo.cbuid AND demoflag.groupid = demo.groupid AND demoflag.cbuid = credit.cbuid AND demoflag.groupid = credit.groupid AND demoflag.cbuid = {0} AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY demoflag.first_report_date
reportcreator.statement.executivesummary.totalreportdata=SELECT credit.cbuid, COUNT(1) AS total, MAX(credit.period) AS period FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = {0} AND credit.period > '{1}' AND (credit.fac_cancel_status IS NULL OR credit.fac_cancel_status = '3') AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY credit.cbuid
reportcreator.statement.executivesummary.court=SELECT defendant.cbuid, COUNT(defendant.cbuid) AS total, defendant.actiondate AS date FROM prod_defendant defendant with (nolock) INNER JOIN prod_plaintiff plaintiff with (nolock) ON defendant.actionno = plaintiff.actionno WHERE defendant.cbuid = {0} AND defendant.actiondate > {1} AND defendant.match_key >= 1000000 AND defendant.disputestatus = 0 AND (ISNULL(defendant.given_name_eng, '') <> '' OR ISNULL(defendant.surname_eng, '') <> '' OR ISNULL(defendant.given_name_nat, '') <> '' OR ISNULL(defendant.surname_nat, '') <> '') AND (ISNULL(plaintiff.actiondesc_text_eng, '') <> ''/* OR plaintiff.actiondesc_text_chn IS NOT NULL*/) AND (ISNULL(plaintiff.plaintiff_1_eng, '') <> '' OR ISNULL(plaintiff.plaintiff_1_nat, '') <> '') AND (ISNULL(plaintiff.file_number, '') <> '') AND (ISNULL(plaintiff.causeofaction_text_eng, '') <> '' OR ISNULL(plaintiff.causeofaction_text_chn, '') <> '') GROUP BY defendant.cbuid, defendant.actiondate
reportcreator.statement.executivesummary.totalpastdue60days=SELECT TOP 1 hiscredit.cbuid, SUM(hiscredit.amount_due_60_days) AS total, MAX(hiscredit.period) AS period FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid WHERE hiscredit.cbuid = {0} AND hiscredit.period > '{1}' AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY hiscredit.cbuid, hiscredit.period ORDER BY hiscredit.period DESC
reportcreator.statement.executivesummary.dispute=SELECT * FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = {0} AND credit.period > '{1}' AND (credit.disputestatus = 1 OR demoflag.disputestatus = 1) /* AND credit.disputedate IS NOT NULL*/ AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)) DESC
reportcreator.statement.executivesummary.totalrecoveredamount=SELECT TOP 1 credit.cbuid, SUM(ISNULL(credit.recovered_amount, 0)) AS total, credit.period FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = {0} AND credit.period > '{1}' AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY credit.cbuid, credit.period ORDER BY credit.period DESC
reportcreator.statement.executivesummary.resubmitted=SELECT distinct unload.cbuid, unload.groupid, unload.period, convert(datetime, convert(char(12), unload.resend_date, 112)) as date FROM prod_unload_status unload with (nolock) WHERE unload.cbuid = {0} AND unload.period > '{1}' AND unload.resend_date IS NOT NULL AND (unload.optout_flag <> 1 OR unload.optout_flag is null)
reportcreator.statement.executivesummary.unloaded=SELECT distinct unload.cbuid, unload.groupid, unload.period, convert(datetime, convert(char(12), unload.unload_date, 112)) as date FROM prod_unload_status unload with (nolock) WHERE unload.cbuid = {0} AND unload.period > '{1}' AND (unload.optout_flag <> 1 OR unload.optout_flag is null)
reportcreator.preparedstatement.executivesummary.firstreporteddate=SELECT TOP 1 demoflag.*, demo.name_en, demo.name_lo FROM prod_demographic_flag demoflag with (nolock), prod_demographic demo with (nolock), prod_credit credit with (nolock) WHERE demoflag.cbuid = demo.cbuid AND demoflag.groupid = demo.groupid AND demoflag.cbuid = credit.cbuid AND demoflag.groupid = credit.groupid AND demoflag.cbuid = ? AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) AND demo.period > ? ORDER BY demoflag.first_report_date
reportcreator.preparedstatement.executivesummary.totalreportdata=SELECT credit.cbuid, COUNT(1) AS total, MAX(credit.period) AS period FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = ? AND credit.period > ? AND (credit.fac_cancel_status IS NULL OR credit.fac_cancel_status = '3') AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY credit.cbuid
reportcreator.preparedstatement.executivesummary.totalreportdatawithzerooptout=select count(distinct(credit.cbuid)) AS total from oms_detail_access oms (nolock) INNER JOIN prod_credit credit (nolock) ON credit.cbuid = oms.cbuid AND credit.groupid = oms.groupid AND (oms.optout_flag <> 1 OR oms.optout_flag is null ) INNER JOIN prod_demographic_flag demoflag (nolock) ON demoflag.cbuid = oms.cbuid AND demoflag.groupid = oms.groupid where process_result = 'B01' and process_status = 'A03' and optout_loan_type IS NOT NULL  AND oms.moduleid = 3 AND ((credit.fac_cancel_status IS NULL OR credit.fac_cancel_status = '3') AND (credit.rev_facility_limit = 0 OR credit.non_rev_facility_limit = 0 OR credit.cont_facility_limit = 0 OR credit.combined_facility_limit = 0) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) )and oms.cbuid = ? and oms.data_period > ?
reportcreator.preparedstatement.executivesummary.court=SELECT defendant.cbuid, COUNT(defendant.cbuid) AS total, defendant.actiondate AS date FROM prod_defendant defendant with (nolock) INNER JOIN prod_plaintiff plaintiff with (nolock) ON defendant.actionno = plaintiff.actionno WHERE defendant.cbuid = ? AND defendant.actiondate > ? AND defendant.match_key >= 1000000 AND defendant.disputestatus = 0 AND (ISNULL(defendant.given_name_eng, '') <> '' OR ISNULL(defendant.surname_eng, '') <> '' OR ISNULL(defendant.given_name_nat, '') <> '' OR ISNULL(defendant.surname_nat, '') <> '') AND (ISNULL(plaintiff.actiondesc_text_eng, '') <> '') AND (ISNULL(plaintiff.plaintiff_1_eng, '') <> '' OR ISNULL(plaintiff.plaintiff_1_nat, '') <> '') AND (ISNULL(plaintiff.file_number, '') <> '') AND (ISNULL(plaintiff.causeofaction_text_eng, '') <> '' OR ISNULL(plaintiff.causeofaction_text_chn, '') <> '') GROUP BY defendant.cbuid, defendant.actiondate
reportcreator.preparedstatement.executivesummary.totalpastdue60days=SELECT TOP 1 hiscredit.cbuid, SUM(hiscredit.amount_due_60_days) AS total, MAX(hiscredit.period) AS period FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid WHERE hiscredit.cbuid = ? AND hiscredit.period > ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY hiscredit.cbuid, hiscredit.period ORDER BY hiscredit.period DESC
reportcreator.preparedstatement.executivesummary.dispute=SELECT credit.*, demoflag.disputestatus as creditdisputestatus, demoflag.disputedate as flagdate FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = ? AND (credit.period > ? OR demoflag.period > ?) AND (credit.disputestatus = 1 OR demoflag.disputestatus = 1) AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)) DESC
reportcreator.preparedstatement.executivesummary.totalrecoveredamount=SELECT TOP 1 credit.cbuid, SUM(ISNULL(credit.recovered_amount, 0)) AS total, credit.period FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = ? AND credit.period > ? AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY credit.cbuid, credit.period ORDER BY credit.period DESC
#reportcreator.preparedstatement.executivesummary.resubmitted=SELECT distinct unload.cbuid, unload.groupid, unload.period, convert(datetime, convert(char(12), unload.resend_date, 112)) as date FROM prod_unload_status unload with (nolock) WHERE unload.cbuid = ? AND unload.period > ? AND unload.resend_date IS NOT NULL
reportcreator.preparedstatement.executivesummary.resubmitted=SELECT distinct unload.cbuid, unload.groupid, unload.period, convert(datetime, convert(char(12), unload.resend_date, 112)) as date FROM prod_unload_status unload with (nolock) WHERE unload.cbuid = ? AND unload.period > ?  AND unload.resend_date IS NOT NULL AND (unload.optout_flag <> 1 or unload.optout_flag is null)
#reportcreator.preparedstatement.executivesummary.unloaded=SELECT distinct unload.cbuid, unload.groupid, unload.period, convert(datetime, convert(char(12), unload.unload_date, 112)) as date FROM prod_unload_status unload with (nolock) WHERE unload.cbuid = ? AND unload.period > ?
reportcreator.preparedstatement.executivesummary.unloaded=SELECT distinct unload.cbuid, unload.groupid, unload.period, convert(datetime, convert(char(12), unload.unload_date, 112)) as date FROM prod_unload_status unload with (nolock) WHERE unload.cbuid = ? AND unload.period > ? AND (unload.optout_flag <> 1 or unload.optout_flag is null)
#reportcreator.preparedstatement.executivesummary.updated=SELECT distinct cbuid, groupid, data_period, convert(datetime, convert(char(12),updateddate , 112)) as date from oms_detail_access (nolock) WHERE process_result = 'B01' AND process_status = 'A03' AND moduleid = 1 AND cbuid = ? AND data_period >= ?
reportcreator.preparedstatement.executivesummary.updated=SELECT distinct oms.cbuid, oms.groupid, oms.data_period, convert(datetime, convert(char(12),oms.updateddate , 112)) as date from oms_detail_access oms (nolock) WHERE oms.process_result = 'B01' AND oms.process_status = 'A03' AND (oms.optout_flag <> 1 or oms.optout_flag is null) AND oms.moduleid = 1 AND oms.cbuid = ? AND oms.data_period > ?
reportcreator.preparedstatement.executivesummary.single-row-information=SELECT tbl1.cbuid, tbl1.first_report_date, tbl1.period total_ais_report_period, tbl1.total total_ais_report_number,tbl2.total_amount_due_60_days, tbl2.period_amount_due_60_days, tbl3.total_recovery_amount, tbl3.period_recovery_amount FROM (SELECT MIN(demoflag.first_report_date) first_report_date, COUNT(1) total, MAX(demoflag.period) period, demoflag.cbuid FROM prod_demographic_flag demoflag (nolock) WHERE demoflag.cbuid = ? and demoflag.period > ? AND (writeoffamount IS NULL OR writeoffamount <> -1) AND(recoveryamount IS NULL OR recoveryamount <> -1) GROUP BY demoflag.cbuid) AS tbl1 LEFT OUTER JOIN (SELECT top 1 hiscredit.cbuid, SUM(ISNULL(hiscredit.amount_due_60_days,0))+SUM(ISNULL(hiscredit.amount_due_60_days_revol_fac,0))+SUM(ISNULL(hiscredit.amount_due_60_days_non_revol_fac,0))+SUM(ISNULL(hiscredit.amount_due_60_days_cont_fac,0))+SUM(ISNULL(hiscredit.amount_due_60_days_hp_fac,0)) total_amount_due_60_days,  MAX(hiscredit.period) period_amount_due_60_days FROM history_credit hiscredit WITH(nolock) WHERE hiscredit.cbuid = ? AND hiscredit.period > ? AND(hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND(hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND(hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND(hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) GROUP BY hiscredit.cbuid, hiscredit.period ORDER BY hiscredit.period DESC) AS tbl2 ON tbl1.cbuid = tbl2.cbuid LEFT OUTER JOIN (SELECT top 1 credit.cbuid, SUM(isnull(credit.recovered_amount, 0)) total_recovery_amount, credit.period period_recovery_amount FROM prod_credit credit WITH(nolock) WHERE credit.cbuid = ? AND credit.period > ? AND(credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) GROUP BY credit.cbuid, credit.period ORDER BY credit.period DESC) AS tbl3 ON tbl1.cbuid = tbl3.cbuid

#DEMOGRAPHIC PROFILE, COMPANY GROUP STRUCTURE SECTION
reportcreator.statement.demographic=SELECT TOP 3 demo.* FROM prod_demographic demo with (nolock), prod_credit credit with (nolock), prod_demographic_flag demoflag with (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = {0} AND demo.period > '{1}'  AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0) + + ISNULL(credit.hp_facility_limit, 0)) DESC
#reportcreator.preparedstatement.demographic (The "groupid order by" is not in the specification, add groupid to make the order consist between the profile & positive finance section
reportcreator.preparedstatement.demographic=SELECT TOP 3 demo.* FROM prod_demographic demo with (nolock), prod_credit credit with (nolock), prod_demographic_flag demoflag with (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = ? AND demo.period > ? AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0) + ISNULL(credit.hp_facility_limit, 0)) DESC, credit.period DESC ,credit.groupid ASC
reportcreator.preparedstatement.demographic.all=SELECT demo.* FROM prod_demographic demo with (nolock), prod_credit credit with (nolock), prod_demographic_flag demoflag with (nolock) WHERE demo.cbuid = demoflag.cbuid AND demo.groupid = demoflag.groupid AND demo.cbuid = credit.cbuid AND demo.groupid = credit.groupid AND demo.cbuid = ? AND demo.period > ? AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0) + ISNULL(credit.hp_facility_limit, 0)) DESC , credit.period DESC ,credit.groupid ASC

#COURT SECTION
reportcreator.statement.court=SELECT * FROM prod_defendant defendant with (nolock) INNER JOIN prod_plaintiff plaintiff with (nolock) ON defendant.actionno = plaintiff.actionno WHERE defendant.cbuid = {0} AND defendant.actiondate > {1} AND defendant.match_key >= 1000000 AND defendant.disputestatus = 0 AND (ISNULL(defendant.given_name_eng, '') <> '' OR ISNULL(defendant.surname_eng, '') <> '' OR ISNULL(defendant.given_name_nat, '') <> '' OR ISNULL(defendant.surname_nat, '') <> '') AND (ISNULL(plaintiff.actiondesc_text_eng, '') <> ''/* OR plaintiff.actiondesc_text_chn IS NOT NULL*/) AND (ISNULL(plaintiff.plaintiff_1_eng, '') <> '' OR ISNULL(plaintiff.plaintiff_1_nat, '') <> '') AND (ISNULL(plaintiff.file_number, '') <> '') AND (ISNULL(plaintiff.causeofaction_text_eng, '') <> '' OR ISNULL(plaintiff.causeofaction_text_chn, '') <> '') ORDER BY defendant.actionno
reportcreator.statement.court.otherdefendant=SELECT TOP 3 d.* FROM prod_plaintiff p with (nolock), prod_defendant d with (nolock) WHERE p.actionNO = d.actionNO AND p.actionNO <> '{0}' AND p.file_Number = '{1}' AND p.actionDate > {2} AND d.match_key >= 1000000 AND (p.actionDesc_Text_Eng IS NOT NULL OR p.actionDesc_Text_Chn IS NOT NULL) AND (p.plaintiff_1_Eng IS NOT NULL OR p.plaintiff_1_Nat IS NOT NULL) AND p.file_Number IS NOT NULL AND (p.causeOfAction_Text_Eng IS NOT NULL OR p.causeOfAction_Text_Chn IS NOT NULL) ORDER BY p.actionNO
reportcreator.preparedstatement.court=SELECT * FROM prod_defendant defendant with (nolock) INNER JOIN prod_plaintiff plaintiff with (nolock) ON defendant.actionno = plaintiff.actionno WHERE defendant.cbuid = ? AND defendant.actiondate > ? AND defendant.match_key >= 1000000 AND defendant.action_type=0 AND defendant.disputestatus = 0 AND (ISNULL(defendant.given_name_eng, '') <> '' OR ISNULL(defendant.surname_eng, '') <> '' OR ISNULL(defendant.given_name_nat, '') <> '' OR ISNULL(defendant.surname_nat, '') <> '') AND (ISNULL(plaintiff.actiondesc_text_eng, '') <> ''/* OR plaintiff.actiondesc_text_chn IS NOT NULL*/) AND (ISNULL(plaintiff.plaintiff_1_eng, '') <> '' OR ISNULL(plaintiff.plaintiff_1_nat, '') <> '') AND (ISNULL(plaintiff.file_number, '') <> '') AND (ISNULL(plaintiff.causeofaction_text_eng, '') <> '' OR ISNULL(plaintiff.causeofaction_text_chn, '') <> '') ORDER BY defendant.actiondate
#reportcreator.preparedstatement.court=SELECT * FROM prod_defendant defendant with (nolock) INNER JOIN prod_plaintiff plaintiff with (nolock) ON defendant.actionno = plaintiff.actionno WHERE defendant.cbuid = ? AND defendant.actiondate > ? AND defendant.disputestatus = 0 AND (ISNULL(defendant.given_name_eng, '') <> '' OR ISNULL(defendant.surname_eng, '') <> '' OR ISNULL(defendant.given_name_nat, '') <> '' OR ISNULL(defendant.surname_nat, '') <> '') AND (ISNULL(plaintiff.actiondesc_text_eng, '') <> ''/* OR plaintiff.actiondesc_text_chn IS NOT NULL*/) AND (ISNULL(plaintiff.plaintiff_1_eng, '') <> '' OR ISNULL(plaintiff.plaintiff_1_nat, '') <> '') AND (ISNULL(plaintiff.file_number, '') <> '') AND (ISNULL(plaintiff.causeofaction_text_eng, '') <> '' OR ISNULL(plaintiff.causeofaction_text_chn, '') <> '') ORDER BY defendant.actionno
reportcreator.preparedstatement.court.otherdefendant=SELECT TOP 3 d.* FROM prod_plaintiff p with (nolock), prod_defendant d with (nolock) WHERE p.actionNO = d.actionNO AND d.actionNO = ? AND d.match_key <> ? AND p.file_Number = ? AND p.actionDate > ? AND d.match_key >= 1000000 AND d.action_type =0 AND (p.actionDesc_Text_Eng IS NOT NULL OR p.actionDesc_Text_Chn IS NOT NULL) AND (p.plaintiff_1_Eng IS NOT NULL OR p.plaintiff_1_Nat IS NOT NULL) AND p.file_Number IS NOT NULL AND (p.causeOfAction_Text_Eng IS NOT NULL OR p.causeOfAction_Text_Chn IS NOT NULL) ORDER BY p.actionNO
#reportcreator.preparedstatement.court.otherdefendant=SELECT TOP 3 d.* FROM prod_plaintiff p with (nolock), prod_defendant d with (nolock) WHERE p.actionNO = d.actionNO AND p.actionNO <> ? AND p.file_Number = ? AND p.actionDate > ? AND (p.actionDesc_Text_Eng IS NOT NULL OR p.actionDesc_Text_Chn IS NOT NULL) AND (p.plaintiff_1_Eng IS NOT NULL OR p.plaintiff_1_Nat IS NOT NULL) AND p.file_Number IS NOT NULL AND (p.causeOfAction_Text_Eng IS NOT NULL OR p.causeOfAction_Text_Chn IS NOT NULL) ORDER BY p.actionNO

#NEGATIVE FINANCIAL SECTION
#reportcreator.preparedstatement.negative-financial=SELECT hiscredit.cbuid, hiscredit.period, SUM(CASE WHEN amount_due_60_days IS NULL THEN NULL WHEN amount_due_60_days = 0 THEN NULL ELSE amount_due_60_days END) AS maximumamountpastdue60days, MAX(max_days_past_due) AS maximumdayspastdue, SUM(CASE WHEN amount_due_60_days IS NULL THEN NULL WHEN amount_due_60_days = 0 THEN NULL ELSE 1 END) AS totalaispastdue, SUM(CASE WHEN write_off_amount IS NULL THEN NULL WHEN write_off_amount = 0 THEN NULL ELSE write_off_amount END) AS totalwriteoff, SUM(CASE WHEN write_off_amount IS NULL THEN NULL WHEN write_off_amount = 0 THEN NULL ELSE 1 END) AS totalaiswriteoff, SUM(CASE WHEN recovered_amount IS NULL THEN NULL WHEN recovered_amount = 0 THEN NULL ELSE recovered_amount END) AS totalrecovery, SUM(CASE WHEN recovered_amount IS NULL THEN NULL WHEN recovered_amount = 0 THEN NULL ELSE 1 END) AS totalaisrecovery FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid WHERE hiscredit.cbuid = ? AND hiscredit.period > ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY hiscredit.cbuid, hiscredit.period ORDER BY hiscredit.period DESC
#reportcreator.preparedstatement.negative-financial=SELECT hiscredit.cbuid, hiscredit.period, SUM(CASE WHEN amount_due_60_days IS NULL THEN NULL WHEN amount_due_60_days = 0 THEN NULL ELSE amount_due_60_days END) AS maximumamountpastdue60days, MAX(max_days_past_due) AS maximumdayspastdue, SUM(CASE WHEN amount_due_60_days IS NULL THEN NULL WHEN amount_due_60_days = 0 THEN NULL ELSE 1 END) AS totalaispastdue, SUM(CASE WHEN write_off_amount IS NULL THEN NULL WHEN write_off_amount = 0 THEN NULL ELSE write_off_amount END) AS totalwriteoff, SUM(CASE WHEN write_off_amount IS NULL THEN NULL WHEN write_off_amount = 0 THEN NULL ELSE 1 END) AS totalaiswriteoff, SUM(CASE WHEN recovered_amount IS NULL THEN NULL WHEN recovered_amount = 0 THEN NULL ELSE recovered_amount END) AS totalrecovery, SUM(CASE WHEN recovered_amount IS NULL THEN NULL WHEN recovered_amount = 0 THEN NULL ELSE 1 END) AS totalaisrecovery, SUM(CASE WHEN amount_due_60_days_revol_fac IS NULL THEN NULL WHEN amount_due_60_days_revol_fac = 0 THEN NULL ELSE amount_due_60_days_revol_fac END) AS totalrevolvingpastdue, MAX(max_days_past_due_revol_fac) AS maximumdaysrevolving , SUM(CASE WHEN amount_due_60_days_non_revol_fac IS NULL THEN NULL WHEN amount_due_60_days_non_revol_fac = 0 THEN NULL ELSE amount_due_60_days_non_revol_fac END) AS totalnonrevolvingpastdue , MAX(max_days_past_due_non_revol_fac) AS maximumdaysnonrevolving , SUM(CASE WHEN amount_due_60_days_cont_fac IS NULL THEN NULL WHEN amount_due_60_days_cont_fac = 0 THEN NULL ELSE amount_due_60_days_cont_fac END) AS totalcontigentpastdue, MAX(max_days_past_due_cont_fac) AS maximumdayscontigent, SUM(CASE WHEN amount_due_60_days_hp_fac IS NULL THEN NULL WHEN amount_due_60_days_hp_fac = 0 THEN NULL ELSE amount_due_60_days_hp_fac END) AS totalhpleasingpastdue, MAX(max_days_past_due_hp_fac) AS maximumdaysholeasing FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid WHERE hiscredit.cbuid = ? AND hiscredit.period >= ? AND hiscredit.period <= ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (hiscredit.hp_facility_limit IS NULL OR hiscredit.hp_facility_limit <> -1)AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) GROUP BY hiscredit.cbuid, hiscredit.period ORDER BY hiscredit.period DESC
reportcreator.preparedstatement.negative-financial=SELECT hiscredit.cbuid, hiscredit.period ,hiscredit.groupId , SUM(CASE WHEN amount_due_60_days IS NULL THEN NULL WHEN amount_due_60_days = 0 THEN NULL ELSE amount_due_60_days END) AS maximumamountpastdue60days , MAX(max_days_past_due) AS maximumdayspastdue , SUM(CASE WHEN ISNULL(amount_due_60_days,0) <> 0 THEN 1 WHEN ISNULL(amount_due_60_days_revol_fac,0) <> 0 THEN 1 WHEN ISNULL(amount_due_60_days_non_revol_fac,0) <> 0 THEN 1 WHEN ISNULL(amount_due_60_days_cont_fac,0) <> 0 THEN 1 WHEN ISNULL(amount_due_60_days_hp_fac,0) <> 0 THEN 1 ELSE 0 END) AS totalaispastdue , SUM(CASE WHEN write_off_amount IS NULL THEN NULL WHEN write_off_amount = 0 THEN NULL ELSE write_off_amount END) AS totalwriteoff , SUM(CASE WHEN write_off_amount IS NULL THEN NULL WHEN write_off_amount = 0 THEN NULL ELSE 1 END) AS totalaiswriteoff , SUM(CASE WHEN recovered_amount IS NULL THEN NULL WHEN recovered_amount = 0 THEN NULL ELSE recovered_amount END) AS totalrecovery , SUM(CASE WHEN recovered_amount IS NULL THEN NULL WHEN recovered_amount = 0 THEN NULL ELSE 1 END) AS totalaisrecovery , SUM(CASE WHEN amount_due_60_days_revol_fac IS NULL THEN NULL WHEN amount_due_60_days_revol_fac = 0 THEN NULL ELSE amount_due_60_days_revol_fac END) AS totalrevolvingpastdue , MAX(max_days_past_due_revol_fac) AS maximumdaysrevolving , SUM(CASE WHEN amount_due_60_days_non_revol_fac IS NULL THEN NULL WHEN amount_due_60_days_non_revol_fac = 0 THEN NULL ELSE amount_due_60_days_non_revol_fac END) AS totalnonrevolvingpastdue , MAX(max_days_past_due_non_revol_fac) AS maximumdaysnonrevolving , SUM(CASE WHEN amount_due_60_days_cont_fac IS NULL THEN NULL WHEN amount_due_60_days_cont_fac = 0 THEN NULL ELSE amount_due_60_days_cont_fac END) AS totalcontigentpastdue , MAX(max_days_past_due_cont_fac) AS maximumdayscontigent , SUM(CASE WHEN amount_due_60_days_hp_fac IS NULL THEN NULL WHEN amount_due_60_days_hp_fac = 0 THEN NULL ELSE amount_due_60_days_hp_fac END) AS totalhpleasingpastdue , MAX(max_days_past_due_hp_fac) AS maximumdayshpleasing,spm_group.group_name_en as reportby FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid INNER JOIN spm_group on demoflag.groupid = spm_group.groupid WHERE hiscredit.cbuid = ? AND hiscredit.period >= ? AND hiscredit.period <= ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (hiscredit.hp_facility_limit IS NULL OR hiscredit.hp_facility_limit <> -1)  GROUP BY hiscredit.cbuid, hiscredit.period, hiscredit.groupId,spm_group.group_name_en ORDER BY hiscredit.period DESC

#POSITIVE FINANCIAL SECTION
reportcreator.statement.credit.positivecreditwithoutcancel=SELECT credit.*, credit.period AS reportedperiod, demoflag.disputestatus as creditdisputestatus FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = {0} AND credit.period > '{1}' AND (credit.fac_cancel_status IS NULL OR credit.fac_cancel_status = '3') AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)) DESC, credit.period DESC, credit.groupid ASC
reportcreator.statement.credit.positivecreditwithcancel=SELECT hiscredit.cbuid, hiscredit.groupid, hiscredit.registrationdataid, hiscredit.period, prehiscredit.period as prev_period, hiscredit.report_date, hiscredit.loc_branch_id, hiscredit.acc_mnger_code, prehiscredit.rev_facility_limit, prehiscredit.rev_shared_3rd_party, prehiscredit.non_rev_facility_limit, prehiscredit.non_rev_shared_3rd_party, prehiscredit.cont_facility_limit, prehiscredit.cont_shared_3rd_party, prehiscredit.combined_facility_limit, prehiscredit.combined_shared_3rd_party, prehiscredit.combined_limit_details, hiscredit.fac_cancel_status, hiscredit.tangible_security, hiscredit.write_off_amount, hiscredit.recovered_amount, hiscredit.amount_due_60_days, hiscredit.max_days_past_due, hiscredit.disputestatus, hiscredit.disputedate, hiscredit.flagresend, hiscredit.createdby, hiscredit.createddate, hiscredit.updatedby, hiscredit.updateddate, demoflag.disputestatus as creditdisputestatus FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid LEFT OUTER JOIN history_credit prehiscredit with (nolock) ON hiscredit.cbuid = prehiscredit.cbuid AND hiscredit.groupid = prehiscredit.groupid AND prehiscredit.period = (SELECT max(period) FROM history_credit with (nolock) WHERE period < hiscredit.period) WHERE  hiscredit.cbuid = {0} AND hiscredit.period > '{1}' AND hiscredit.fac_cancel_status <> 3 AND hiscredit.FAC_CANCEL_STATUS IS NOT NULL AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(hiscredit.rev_facility_limit, 0) + ISNULL(hiscredit.non_rev_facility_limit, 0) + ISNULL(hiscredit.cont_facility_limit, 0) + ISNULL(hiscredit.combined_facility_limit, 0)) DESC, hiscredit.period DESC,hiscredit.groupid ASC
reportcreator.statement.credit.checkwriteoff=SELECT * FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid WHERE hiscredit.cbuid = {0} AND hiscredit.groupid = {1} AND hiscredit.period > '{2}' AND hiscredit.period < '{3}' AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) /*AND hiscredit.write_off_amount IS NOT NULL AND hiscredit.write_off_amount <> 0*/ ORDER BY hiscredit.period DESC

##reportcreator.preparedstatement.credit.positivecreditwithoutcancel=SELECT credit.*, credit.period AS reportedperiod, demoflag.disputestatus as creditdisputestatus, demoflag.disputedate as flagdate FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND credit.groupid = demoflag.groupid WHERE credit.cbuid = ? AND credit.period >= ? AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND (credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND (credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (credit.fac_cancel_status IS NULL OR credit.fac_cancel_status = '3') AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)) DESC, credit.period DESC
#reportcreator.preparedstatement.credit.positivecreditwithoutcancel (The "groupid order by" is not in the specification, add groupid to make the order consist between the profile & positive finance section
reportcreator.preparedstatement.credit.positivecreditwithoutcancel=SELECT credit.*, credit.period AS reportedperiod, demoflag.disputestatus as creditdisputestatus, demoflag.disputedate as flagdate, credit.hp_facility_limit, credit.hp_shared_3rd_party FROM prod_credit credit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON credit.cbuid = demoflag.cbuid AND 	credit.groupid = demoflag.groupid WHERE credit.cbuid = ? AND credit.period > ? AND (credit.rev_facility_limit IS NULL OR credit.rev_facility_limit <> -1) AND	(credit.non_rev_facility_limit IS NULL OR credit.non_rev_facility_limit <> -1) AND (credit.cont_facility_limit IS NULL OR credit.cont_facility_limit <> -1) AND	(credit.combined_facility_limit IS NULL OR credit.combined_facility_limit <> -1) AND (credit.hp_facility_limit IS NULL OR credit.hp_facility_limit <> -1) AND (credit.fac_cancel_status IS NULL OR credit.fac_cancel_status = '3')  ORDER BY (ISNULL(credit.rev_facility_limit, 0) + ISNULL(credit.non_rev_facility_limit, 0) + ISNULL(credit.cont_facility_limit, 0) + ISNULL(credit.combined_facility_limit, 0)+ ISNULL(credit.hp_facility_limit, 0)) DESC	, credit.period DESC , credit.groupid ASC
reportcreator.preparedstatement.credit.positivecreditwithoutcancel.merge=SELECT hiscredit.cbuid, merge_de.groupid, hiscredit.registrationdataid, hiscredit.period, hiscredit.report_date, hiscredit.loc_branch_id, hiscredit.acc_mnger_code, sum(prehiscredit.rev_facility_limit) as rev_facility_limit, prehiscredit.rev_shared_3rd_party, sum(prehiscredit.non_rev_facility_limit) as non_rev_facility_limit, prehiscredit.non_rev_shared_3rd_party, sum(prehiscredit.cont_facility_limit) as cont_facility_limit, prehiscredit.cont_shared_3rd_party, sum(prehiscredit.combined_facility_limit) as combined_facility_limit, prehiscredit.combined_shared_3rd_party, null as combined_limit_details, null as fac_cancel_status, hiscredit.tangible_security, null as write_off_amount, null as recovered_amount, null as amount_due_60_days, null as max_days_past_due, null as disputestatus, null as disputedate, null as flagresend, null as createdby, null as createddate, null as updatedby, null as updateddate, hiscredit.period as reportedperiod, null as creditdisputestatus, null as flagdate FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid inner join prod_ai_merge_detail as merge_de (nolock) on hiscredit.groupid = merge_de.groupid_merge inner join prod_ai_merge as merge_ms (nolock) on merge_de.groupid = merge_ms.groupid and merge_de.asof = merge_ms.asof AND hiscredit.period = cast(datename(yyyy,MERGE_EFFECTIVE_DATE) as varchar)+case when len(MONTH(MERGE_EFFECTIVE_DATE)) = 1 then '0' else '' end+cast(MONTH(MERGE_EFFECTIVE_DATE) as varchar) inner JOIN history_credit prehiscredit with (nolock) ON hiscredit.cbuid = prehiscredit.cbuid AND hiscredit.groupid = prehiscredit.groupid AND prehiscredit.period = (SELECT max(temp_his.period) FROM history_credit temp_his with (nolock) WHERE temp_his.period < hiscredit.period and temp_his.cbuid = hiscredit.cbuid and temp_his.groupid = hiscredit.groupid) WHERE  hiscredit.cbuid = ? AND hiscredit.period > ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND hiscredit.fac_cancel_status <> 3 AND hiscredit.fac_cancel_status IS NOT NULL AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) group by hiscredit.cbuid, merge_de.groupid, hiscredit.registrationdataid, hiscredit.period, hiscredit.report_date, hiscredit.loc_branch_id, hiscredit.acc_mnger_code, prehiscredit.rev_shared_3rd_party, prehiscredit.non_rev_shared_3rd_party, prehiscredit.cont_shared_3rd_party, prehiscredit.combined_shared_3rd_party, prehiscredit.combined_limit_details, hiscredit.tangible_security ORDER BY (ISNULL(sum(prehiscredit.rev_facility_limit), 0) + ISNULL(sum(prehiscredit.non_rev_facility_limit), 0) + ISNULL(sum(prehiscredit.cont_facility_limit), 0) + ISNULL(sum(prehiscredit.combined_facility_limit), 0)) DESC, hiscredit.period DESC ,hiscredit.groupid ASC

##reportcreator.preparedstatement.credit.positivecreditwithcancel=SELECT hiscredit.cbuid, hiscredit.groupid, hiscredit.registrationdataid, hiscredit.period, prehiscredit.period as prev_period, hiscredit.report_date, hiscredit.loc_branch_id, hiscredit.acc_mnger_code, prehiscredit.rev_facility_limit, prehiscredit.rev_shared_3rd_party, prehiscredit.non_rev_facility_limit, prehiscredit.non_rev_shared_3rd_party, prehiscredit.cont_facility_limit, prehiscredit.cont_shared_3rd_party, prehiscredit.combined_facility_limit, prehiscredit.combined_shared_3rd_party, prehiscredit.combined_limit_details, hiscredit.fac_cancel_status, hiscredit.tangible_security, hiscredit.write_off_amount, hiscredit.recovered_amount, hiscredit.amount_due_60_days, hiscredit.max_days_past_due, hiscredit.disputestatus, hiscredit.disputedate, hiscredit.flagresend, hiscredit.createdby, hiscredit.createddate, hiscredit.updatedby, hiscredit.updateddate, demoflag.disputestatus as creditdisputestatus, demoflag.disputedate as flagdate FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid LEFT OUTER JOIN history_credit prehiscredit with (nolock) ON hiscredit.cbuid = prehiscredit.cbuid AND hiscredit.groupid = prehiscredit.groupid AND prehiscredit.period = (SELECT max(period) FROM history_credit with (nolock) WHERE period < hiscredit.period) WHERE  hiscredit.cbuid = ? AND hiscredit.period >= ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND hiscredit.fac_cancel_status <> 3 AND hiscredit.fac_cancel_status IS NOT NULL AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(hiscredit.rev_facility_limit, 0) + ISNULL(hiscredit.non_rev_facility_limit, 0) + ISNULL(hiscredit.cont_facility_limit, 0) + ISNULL(hiscredit.combined_facility_limit, 0)) DESC, hiscredit.period DESC
#reportcreator.preparedstatement.credit.positivecreditwithcancel=SELECT hiscredit.cbuid, hiscredit.groupid, hiscredit.registrationdataid, hiscredit.period, prehiscredit.period as prev_period, hiscredit.report_date, hiscredit.loc_branch_id, hiscredit.acc_mnger_code, prehiscredit.rev_facility_limit, prehiscredit.rev_shared_3rd_party, prehiscredit.non_rev_facility_limit, prehiscredit.non_rev_shared_3rd_party, prehiscredit.cont_facility_limit, prehiscredit.cont_shared_3rd_party, prehiscredit.combined_facility_limit, prehiscredit.combined_shared_3rd_party, prehiscredit.combined_limit_details, hiscredit.fac_cancel_status, hiscredit.tangible_security, hiscredit.write_off_amount, hiscredit.recovered_amount, hiscredit.amount_due_60_days, hiscredit.max_days_past_due, hiscredit.disputestatus, hiscredit.disputedate, hiscredit.flagresend, hiscredit.createdby, hiscredit.createddate, hiscredit.updatedby, hiscredit.updateddate, demoflag.disputestatus as creditdisputestatus, demoflag.disputedate as flagdate , prehiscredit.hp_facility_limit, prehiscredit.hp_shared_3rd_party FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid LEFT OUTER JOIN history_credit prehiscredit with (nolock) ON hiscredit.cbuid = prehiscredit.cbuid AND hiscredit.groupid = prehiscredit.groupid AND prehiscredit.period = (SELECT max(period) FROM history_credit with (nolock) WHERE period < hiscredit.period and hiscredit.cbuid = cbuid and hiscredit.groupid = groupid) WHERE hiscredit.cbuid = ? AND hiscredit.period >= ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND(hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND(hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (hiscredit.hp_facility_limit IS NULL OR hiscredit.hp_facility_limit <> -1) AND hiscredit.fac_cancel_status <> 3 AND hiscredit.fac_cancel_status IS NOT NULL AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(hiscredit.rev_facility_limit, 0) + ISNULL(hiscredit.non_rev_facility_limit, 0) + ISNULL(hiscredit.cont_facility_limit, 0) + ISNULL(hiscredit.combined_facility_limit, 0)+ ISNULL(hiscredit.hp_facility_limit, 0)) DESC , hiscredit.period DESC
reportcreator.preparedstatement.credit.positivecreditwithcancel=SELECT hiscredit.cbuid, hiscredit.groupid, hiscredit.registrationdataid, hiscredit.period, prehiscredit.period as prev_period, hiscredit.report_date, hiscredit.loc_branch_id, hiscredit.acc_mnger_code, prehiscredit.rev_facility_limit, prehiscredit.rev_shared_3rd_party, prehiscredit.non_rev_facility_limit, prehiscredit.non_rev_shared_3rd_party, prehiscredit.cont_facility_limit, prehiscredit.cont_shared_3rd_party, prehiscredit.combined_facility_limit, prehiscredit.combined_shared_3rd_party, prehiscredit.combined_limit_details, hiscredit.fac_cancel_status, hiscredit.tangible_security, hiscredit.write_off_amount, hiscredit.recovered_amount, hiscredit.amount_due_60_days, hiscredit.max_days_past_due, hiscredit.disputestatus, hiscredit.disputedate, hiscredit.flagresend, hiscredit.createdby, hiscredit.createddate, hiscredit.updatedby, hiscredit.updateddate, demoflag.disputestatus as creditdisputestatus, demoflag.disputedate as flagdate , prehiscredit.hp_facility_limit, prehiscredit.hp_shared_3rd_party, case when hiscredit.fac_cancel_status = 1 then (SELECT top 1 1 FROM history_credit with (nolock) WHERE cbuid = hiscredit.cbuid AND groupid = hiscredit.groupid and period > (select case when periodcheck is null then ? else periodcheck end  from  (select max(period) as periodcheck from  history_credit where fac_cancel_status = 3 and period > ? and period <= hiscredit.period  and groupid = hiscredit.groupid and cbuid = hiscredit.cbuid) data)  and (fac_cancel_status <> 3 or fac_cancel_status is null)  and write_off_amount > 0 and period <= hiscredit.period AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (hiscredit.hp_facility_limit IS NULL OR hiscredit.hp_facility_limit <> -1)) else null end as is_write_off FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid LEFT OUTER JOIN history_credit prehiscredit with (nolock) ON hiscredit.cbuid = prehiscredit.cbuid AND hiscredit.groupid = prehiscredit.groupid AND prehiscredit.period = (SELECT max(period) FROM history_credit with (nolock) WHERE period < hiscredit.period and hiscredit.cbuid = cbuid and hiscredit.groupid = groupid) WHERE hiscredit.cbuid = ? AND hiscredit.period > ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND(hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND(hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (hiscredit.hp_facility_limit IS NULL OR hiscredit.hp_facility_limit <> -1) AND hiscredit.fac_cancel_status <> 3 AND hiscredit.fac_cancel_status IS NOT NULL AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) ORDER BY (ISNULL(prehiscredit.rev_facility_limit, 0) + ISNULL(prehiscredit.non_rev_facility_limit, 0) + ISNULL(prehiscredit.cont_facility_limit, 0) + ISNULL(prehiscredit.combined_facility_limit, 0)+ ISNULL(prehiscredit.hp_facility_limit, 0)) DESC , prehiscredit.period DESC ,hiscredit.groupid ASC

reportcreator.preparedstatement.credit.positivecreditoptoutflag=select data_period, groupid, optout_loan_type from oms_detail_access (nolock) where process_result = 'B01' and process_status = 'A03' and optout_loan_type IS NOT NULL and cbuid = ? and data_period > ? and (optout_flag <> 1 or optout_flag is null)

##update checkwriteoff 2 years
#reportcreator.preparedstatement.credit.checkwriteoff=SELECT * FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid WHERE hiscredit.cbuid = ? AND hiscredit.groupid = ? AND hiscredit.period >= ? AND hiscredit.period <= ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) /*AND hiscredit.write_off_amount IS NOT NULL AND hiscredit.write_off_amount <> 0*/ ORDER BY hiscredit.period DESC
reportcreator.preparedstatement.credit.checkwriteoff=SELECT * FROM history_credit hiscredit with (nolock) INNER JOIN prod_demographic_flag demoflag with (nolock) ON hiscredit.cbuid = demoflag.cbuid AND hiscredit.groupid = demoflag.groupid WHERE hiscredit.cbuid = ? AND hiscredit.groupid = ? AND hiscredit.period > ? AND hiscredit.period <= ? AND (hiscredit.rev_facility_limit IS NULL OR hiscredit.rev_facility_limit <> -1) AND (hiscredit.non_rev_facility_limit IS NULL OR hiscredit.non_rev_facility_limit <> -1) AND (hiscredit.cont_facility_limit IS NULL OR hiscredit.cont_facility_limit <> -1) AND (hiscredit.combined_facility_limit IS NULL OR hiscredit.combined_facility_limit <> -1) AND (hiscredit.hp_facility_limit IS NULL OR hiscredit.hp_facility_limit <> -1) AND (demoflag.revoc_effect_date > GETDATE() OR demoflag.revoc_effect_date IS NULL) /*AND hiscredit.write_off_amount IS NOT NULL AND hiscredit.write_off_amount <> 0*/ ORDER BY hiscredit.period DESC

#REVOCATION OF CONSENT SECTION
reportcreator.preparedstatement.revocationofconsent=SELECT DISTINCT demoflag.groupid, demoflag.revoc_noticed_date, demoflag.revoc_effect_date FROM history_demographic_flag demoflag with (nolock), history_credit credit with (nolock), history_demographic demo with (nolock) WHERE demoflag.cbuid = demo.cbuid AND demoflag.groupid = demo.groupid AND demoflag.cbuid = credit.cbuid AND demoflag.groupid = credit.groupid AND demoflag.period = demo.period AND demoflag.period = credit.period AND demoflag.cbuid = ? AND demoflag.revoc_effect_date > ? ORDER BY demoflag.revoc_effect_date, demoflag.groupid

#AI ORDERED LIST OF COVER PAGE
reportcreator.preparedstatement.aiorderedlist=SELECT DISTINCT responsetime AS enquirytime, (SELECT group_name_en FROM spm_group (nolock) WHERE groupid = s.groupaiid) AS group_name, (SELECT objectlabel FROM spm_object (nolock) WHERE objectid = s.productusage) AS productusage, (SELECT description_en FROM base_reason b (nolock), mal_productdeliver m (nolock) WHERE m.reasoncode = b.id AND m.expenseid = s.expenseid AND m.matchkey IS NOT NULL) AS reason FROM spm_expense s (nolock) WHERE productusage IN (50,51) AND s.groupaiid <> 1 AND s.cbuid = ? AND s.responsetime >= ? AND s.responsetime < ? ORDER BY enquirytime DESC, group_name, productusage

#TABLE SCHEMA
#PROD_DEMOGRAPHIC
report.table.prod_demographic.name=PROD_DEMOGRAPHIC
report.table.prod_demographic.columns.cbuid=CBUID
report.table.prod_demographic.columns.groupid=GROUPID
report.table.prod_demographic.columns.registrationdataid=REGISTRATIONDATAID
report.table.prod_demographic.columns.period=PERIOD
report.table.prod_demographic.columns.dunsno=DUNSNO
report.table.prod_demographic.columns.namelo=NAME_LO
report.table.prod_demographic.columns.nameen=NAME_EN
report.table.prod_demographic.columns.companytype=COM_TYPE
report.table.prod_demographic.columns.brcno=BRC_NO
report.table.prod_demographic.columns.cino=CI_NO
report.table.prod_demographic.columns.otherregistrationno=OTHER_REG_NO
report.table.prod_demographic.columns.placeofregistration=PLACE_OF_REG
report.table.prod_demographic.columns.customerno=CUSTOMER_NO
report.table.prod_demographic.columns.tradenamelo=TRADE_NAME_LO
report.table.prod_demographic.columns.tradenameen=TRADE_NAME_EN
report.table.prod_demographic.columns.prevnamelo=PREV_NAME_LO
report.table.prod_demographic.columns.prevnameen=PREV_NAME_EN
report.table.prod_demographic.columns.addresslo1=ADDRESS_LO_1
report.table.prod_demographic.columns.addresslo2=ADDRESS_LO_2
report.table.prod_demographic.columns.addresslo3=ADDRESS_LO_3
report.table.prod_demographic.columns.citylo=CITY_LO
report.table.prod_demographic.columns.provincelo=PROVINCE_LO
report.table.prod_demographic.columns.addressen1=ADDRESS_1
report.table.prod_demographic.columns.addressen2=ADDRESS_2
report.table.prod_demographic.columns.addressen3=ADDRESS_3
report.table.prod_demographic.columns.postcode=POST_CODE
report.table.prod_demographic.columns.cityen=CITY
report.table.prod_demographic.columns.provinceen=PROVINCE
report.table.prod_demographic.columns.country=COUNTRY
report.table.prod_demographic.columns.countrycode=COUNTRY_CODE
report.table.prod_demographic.columns.areacode=AREA_CODE
report.table.prod_demographic.columns.phoneno=PHONE_NO
report.table.prod_demographic.columns.revocationupdated=REVOC_UPDATE
report.table.prod_demographic.columns.revocationnoticeddate=REVOC_NOTICED_DATE
report.table.prod_demographic.columns.revocationeffecteddate=REVOC_EFFECT_DATE
report.table.prod_demographic.columns.withdrawrevocation=WITHDRAW_REVOC
report.table.prod_demographic.columns.sharedholdernamelo=SHAREHOLDER_NAME_LO
report.table.prod_demographic.columns.sharedholdernameen=SHAREHOLDER_NAME_EN
report.table.prod_demographic.columns.flagresend=FLAGRESEND
report.table.prod_demographic.columns.createdby=CREATEDBY
report.table.prod_demographic.columns.createddate=CREATEDDATE
report.table.prod_demographic.columns.updatedby=UPDATEDBY
report.table.prod_demographic.columns.updateddate=UPDATEDDATE

#PROD_DEMOGRAPHIC_FLAG
report.table.prod_demographic_flag.name=PROD_DEMOGRAPHIC_FLAG
report.table.prod_demographic_flag.columns.cbuid=CBUID
report.table.prod_demographic_flag.columns.groupid=GROUPID
report.table.prod_demographic_flag.columns.total=TOTAL
report.table.prod_demographic_flag.columns.registrationdataid=REGISTRATIONDATAID
report.table.prod_demographic_flag.columns.period=PERIOD
report.table.prod_demographic_flag.columns.disputeddate=DISPUTEDATE
report.table.prod_demographic_flag.columns.revocationstatus=REVOC_STATUS
report.table.prod_demographic_flag.columns.revocationnoticeddate=REVOC_NOTICED_DATE
report.table.prod_demographic_flag.columns.revocationeffecteddate=REVOC_EFFECT_DATE
report.table.prod_demographic_flag.columns.withdrawrevocation=WITHDRAW_REVOC
report.table.prod_demographic_flag.columns.firstreporteddate=FIRST_REPORT_DATE
report.table.prod_demographic_flag.columns.firstpastdueddate=FIRST_PAST_DUE_DATE
report.table.prod_demographic_flag.columns.writeoffamount=WRITEOFFAMOUNT
report.table.prod_demographic_flag.columns.recoveryamount=RECOVERYAMOUNT
report.table.prod_demographic_flag.columns.createdby=CREATEDBY
report.table.prod_demographic_flag.columns.createddate=CREATEDDATE
report.table.prod_demographic_flag.columns.updatedby=UPDATEDBY
report.table.prod_demographic_flag.columns.updateddate=UPDATEDDATE

#TOTAL NUMBER OF AIs REPORT ACTIVE LOAN DATA
report.dynamic.columns.cbuid=CBUID
report.dynamic.columns.period=PERIOD
report.dynamic.columns.total=TOTAL
report.dynamic.columns.date=DATE

#OMS_DETAIL_ACCESS
report.table.oms_detail_access.cbuid=CBUID
report.table.oms_detail_access.period=DATA_PERIOD
report.table.oms_detail_access.groupid=GROUPID
report.table.oms_detail_access.loantype=OPTOUT_LOAN_TYPE

#PROD_CREDIT
report.table.prod_credit.name=PROD_CREDIT
report.table.prod_credit.columns.cbuid=CBUID
report.table.prod_credit.columns.groupid=GROUPID
report.table.prod_credit.columns.registrationdataid=REGISTRATIONDATAID
report.table.prod_credit.columns.period=PERIOD
report.table.prod_credit.columns.reportedperiod=PREV_PERIOD
report.table.prod_credit.columns.reporteddate=REPORT_DATE
report.table.prod_credit.columns.locationbranchid=LOC_BRANCH_ID
report.table.prod_credit.columns.accountmanagercode=ACC_MNGER_CODE
report.table.prod_credit.columns.revocationfacilitylimit=REV_FACILITY_LIMIT
report.table.prod_credit.columns.revocationshared3rdparty=REV_SHARED_3RD_PARTY
report.table.prod_credit.columns.nonrevocationfacilitylimit=NON_REV_FACILITY_LIMIT
report.table.prod_credit.columns.nonrevocationshared3rdparty=NON_REV_SHARED_3RD_PARTY
report.table.prod_credit.columns.contigentfacilitylimit=CONT_FACILITY_LIMIT
report.table.prod_credit.columns.contigentshared3rdparty=CONT_SHARED_3RD_PARTY
report.table.prod_credit.columns.hpleasingfacilitylimit=HP_FACILITY_LIMIT
report.table.prod_credit.columns.hpleasingshared3rdparty=HP_SHARED_3RD_PARTY
report.table.prod_credit.columns.combinedfacilitylimit=COMBINED_FACILITY_LIMIT
report.table.prod_credit.columns.combinedshared3rdparty=COMBINED_SHARED_3RD_PARTY
report.table.prod_credit.columns.combinedlimitdetails=COMBINED_LIMIT_DETAILS
report.table.prod_credit.columns.facilitycancelstatus=FAC_CANCEL_STATUS
report.table.prod_credit.columns.tangiblesecurity=TANGIBLE_SECURITY
report.table.prod_credit.columns.writeoffamount=WRITE_OFF_AMOUNT
report.table.prod_credit.columns.recoveredamount=RECOVERED_AMOUNT
report.table.prod_credit.columns.amountdue60days=AMOUNT_DUE_60_DAYS
report.table.prod_credit.columns.maxdayspastdue=MAX_DAYS_PAST_DUE
report.table.prod_credit.columns.disputedstatus=DISPUTESTATUS
report.table.prod_credit.columns.disputeddate=DISPUTEDATE
report.table.prod_credit.columns.flagresend=FLAGRESEND
report.table.prod_credit.columns.createdby=CREATEDBY
report.table.prod_credit.columns.createddate=CREATEDDATE
report.table.prod_credit.columns.updatedby=UPDATEDBY
report.table.prod_credit.columns.updateddate=UPDATEDDATE
report.table.prod_credit.columns.creditdisputedstatus=CREDITDISPUTESTATUS
report.table.prod_credit.columns.flagdate=FLAGDATE

#AILIST
report.table.ailist.columns.cbuid=CBUID
report.table.ailist.columns.groupid=GROUPID
report.table.ailist.columns.period=PERIOD
report.table.ailist.columns.aicode=AICODE
report.table.ailist.columns.nameen=GROUP_NAME_EN
report.table.ailist.columns.namelo=GROUP_NAME_LO
report.table.ailist.columns.locbranchid=LOC_BRANCH_ID
report.table.ailist.columns.accmngercode=ACC_MNGER_CODE
report.table.ailist.columns.customerno=CUSTOMER_NO
report.table.ailist.columns.brcno=BRC_NO
report.table.ailist.columns.cino=CI_NO
report.table.ailist.columns.otherregno=OTHER_REG_NO
report.table.ailist.columns.placeofreg=PLACE_OF_REG
report.table.ailist.columns.totalfacility=TOTAL_FACILITY

#POSITIVE FINANCIAL
report.table.positive-financial.columns.cbuid=CBUID
report.table.positive-financial.columns.period=PERIOD
report.table.positive-financial.columns.maximumamountpastdue60days=MAXIMUMAMOUNTPASTDUE60DAYS
report.table.positive-financial.columns.maximumdayspastdue=MAXIMUMDAYSPASTDUE
report.table.positive-financial.columns.totalaispastdue=TOTALAISPASTDUE
report.table.positive-financial.columns.totalwriteoff=TOTALWRITEOFF
report.table.positive-financial.columns.totalaiswriteoff=TOTALAISWRITEOFF
report.table.positive-financial.columns.totalrecovery=TOTALRECOVERY
report.table.positive-financial.columns.totalaisrecovery=TOTALAISRECOVERY

#NEGATIVE FINANCIAL
report.table.negative-financial.columns.cbuid=CBUID
report.table.negative-financial.columns.period=PERIOD
report.table.negative-financial.columns.groupid=GROUPID
report.table.negative-financial.columns.maximumamountpastdue60days=MAXIMUMAMOUNTPASTDUE60DAYS
report.table.negative-financial.columns.maximumdayspastdue=MAXIMUMDAYSPASTDUE
report.table.negative-financial.columns.totalaispastdue=TOTALAISPASTDUE
report.table.negative-financial.columns.totalwriteoff=TOTALWRITEOFF
report.table.negative-financial.columns.totalaiswriteoff=TOTALAISWRITEOFF
report.table.negative-financial.columns.totalrecovery=TOTALRECOVERY
report.table.negative-financial.columns.totalaisrecovery=TOTALAISRECOVERY
report.table.negative-financial.columns.totalrevolvingpastdue=TOTALREVOLVINGPASTDUE
report.table.negative-financial.columns.maximumdaysrevolving=MAXIMUMDAYSREVOLVING
report.table.negative-financial.columns.totalnonrevolvingpastdue=TOTALNONREVOLVINGPASTDUE
report.table.negative-financial.columns.maximumdaysnonrevolving=MAXIMUMDAYSNONREVOLVING
report.table.negative-financial.columns.totalcontigentpastdue=TOTALCONTIGENTPASTDUE
report.table.negative-financial.columns.maximumdayscontigent=MAXIMUMDAYSCONTIGENT
report.table.negative-financial.columns.totalhpleasingpastdue=TOTALHPLEASINGPASTDUE
report.table.negative-financial.columns.maximumdayshpleasing=MAXIMUMDAYSHPLEASING
report.table.negative-financial.columns.reportBy=REPORTBY

#PROD_DEFENDANT
report.table.prod_defendant=PROD_DEFENDANT
report.table.prod_defendant.columns.actionno=ACTIONNO
report.table.prod_defendant.columns.defno=DEFNO
report.table.prod_defendant.columns.actiondate=ACTIONDATE
report.table.prod_defendant.columns.matchstatus=MATCHSTATUS
report.table.prod_defendant.columns.active=ACTIVE
report.table.prod_defendant.columns.matchkey=MATCH_KEY
report.table.prod_defendant.columns.actiontype=ACTION_TYPE
report.table.prod_defendant.columns.surnamefirst=SURNAME_FIRST
report.table.prod_defendant.columns.surnameeng=SURNAME_ENG
report.table.prod_defendant.columns.maidensurnameeng=MAIDEN_SURNAME_ENG
report.table.prod_defendant.columns.secondnameeng=SECOND_NAME_ENG
report.table.prod_defendant.columns.givennameeng=GIVEN_NAME_ENG
report.table.prod_defendant.columns.defidtype=DEF_ID_TYPE
report.table.prod_defendant.columns.defid=DEF_ID
report.table.prod_defendant.columns.formersurnameeng=FORMER_SURNAME_ENG
report.table.prod_defendant.columns.formermaidensurnameeng=FORMER_MAIDEN_SURNAME_ENG
report.table.prod_defendant.columns.formersecondnameeng=FORMER_SECOND_NAME_ENG
report.table.prod_defendant.columns.formergivennameeng=FORMER_GIVEN_NAME_ENG
report.table.prod_defendant.columns.aliassurnameeng=ALIAS_SURNAME_ENG
report.table.prod_defendant.columns.aliasmaidensurnameeng=ALIAS_MAIDEN_SURNAME_ENG
report.table.prod_defendant.columns.aliassecondnameeng=ALIAS_SECOND_NAME_ENG
report.table.prod_defendant.columns.aliasgivennameeng=ALIAS_GIVEN_NAME_ENG
report.table.prod_defendant.columns.address1eng=ADDRESS_1_ENG
report.table.prod_defendant.columns.address2eng=ADDRESS_2_ENG
report.table.prod_defendant.columns.cityeng=CITY_ENG
report.table.prod_defendant.columns.countryeng=COUNTRY_ENG
report.table.prod_defendant.columns.stateeng=STATE_ENG
report.table.prod_defendant.columns.postcode=POST_CODE
report.table.prod_defendant.columns.country=COUNTRY
report.table.prod_defendant.columns.defothers=DEF_OTHERS
report.table.prod_defendant.columns.proprietorregno=PROPRIETOR_REGNO
report.table.prod_defendant.columns.proprietoreng=PROPRIETOR_ENG
report.table.prod_defendant.columns.proprietorformereng=PROPRIETOR_FORMER_ENG
report.table.prod_defendant.columns.proprietoraddr1eng=PROPRIETOR_ADDR1_ENG
report.table.prod_defendant.columns.proprietoraddr2eng=PROPRIETOR_ADDR2_ENG
report.table.prod_defendant.columns.proprietorcityeng=PROPRIETOR_CITY_ENG
report.table.prod_defendant.columns.proprietorcountryeng=PROPRIETOR_COUNTRY_ENG
report.table.prod_defendant.columns.proprietorstateeng=PROPRIETOR_STATE_ENG
report.table.prod_defendant.columns.proprietorpostcode=PROPRIETOR_POSTCODE
report.table.prod_defendant.columns.surnamenat=SURNAME_NAT
report.table.prod_defendant.columns.maidensurnamenat=MAIDEN_SURNAME_NAT
report.table.prod_defendant.columns.secondnamenat=SECOND_NAME_NAT
report.table.prod_defendant.columns.givennamenat=GIVEN_NAME_NAT
report.table.prod_defendant.columns.formersurnamenat=FORMER_SURNAME_NAT
report.table.prod_defendant.columns.formermaidensurnamenat=FORMER_MAIDEN_SURNAME_NAT
report.table.prod_defendant.columns.formersecondsurnamenat=FORMER_SECOND_SURNAME_NAT
report.table.prod_defendant.columns.formergivensurnamenat=FORMER_GIVEN_SURNAME_NAT
report.table.prod_defendant.columns.aliassurnamenat=ALIAS_SURNAME_NAT
report.table.prod_defendant.columns.aliasmaidensurnamenat=ALIAS_MAIDEN_SURNAME_NAT
report.table.prod_defendant.columns.aliassecondsurnamenat=ALIAS_SECOND_SURNAME_NAT
report.table.prod_defendant.columns.aliasgivensurnamenat=ALIAS_GIVEN_SURNAME_NAT
report.table.prod_defendant.columns.address1nat=ADDRESS_1_NAT
report.table.prod_defendant.columns.address2nat=ADDRESS_2_NAT
report.table.prod_defendant.columns.citynat=CITY_NAT
report.table.prod_defendant.columns.countrynat=COUNTRY_NAT
report.table.prod_defendant.columns.statenat=STATE_NAT
report.table.prod_defendant.columns.proprietornat=PROPRIETOR_NAT
report.table.prod_defendant.columns.proprietorformernat=PROPRIETOR_FORMER_NAT
report.table.prod_defendant.columns.proprietoraddr1nat=PROPRIETOR_ADDR1_NAT
report.table.prod_defendant.columns.proprietoraddr2nat=PROPRIETOR_ADDR2_NAT
report.table.prod_defendant.columns.proprietorcitynat=PROPRIETOR_CITY_NAT
report.table.prod_defendant.columns.proprietorcountrynat=PROPRIETOR_COUNTRY_NAT
report.table.prod_defendant.columns.proprietorstatenat=PROPRIETOR_STATE_NAT
report.table.prod_defendant.columns.defendantref=DEFENDANT_REF
report.table.prod_defendant.columns.updatedate=UPDATEDATE
report.table.prod_defendant.columns.matchdate=MATCHDATE
report.table.prod_defendant.columns.cbuid=CBUID
report.table.prod_defendant.columns.createddate=CREATEDDATE

#PROD_PLAINTIFF
report.table.prod_plaintiff.columns.actionno=ACTIONNO
report.table.prod_plaintiff.columns.actiondesctexteng=ACTIONDESC_TEXT_ENG
report.table.prod_plaintiff.columns.actiondesctextchn=ACTIONDESC_TEXT_CHN
report.table.prod_plaintiff.columns.filenumber=FILE_NUMBER
report.table.prod_plaintiff.columns.amount=AMOUNT
report.table.prod_plaintiff.columns.causeofactiontexteng=CAUSEOFACTION_TEXT_ENG
report.table.prod_plaintiff.columns.causeofactiontextchn=CAUSEOFACTION_TEXT_CHN
report.table.prod_plaintiff.columns.currencycode=CURRENCY_CODE
report.table.prod_plaintiff.columns.actiondate=ACTIONDATE
report.table.prod_plaintiff.columns.plaintiff1eng=PLAINTIFF_1_ENG
report.table.prod_plaintiff.columns.plaintiff1nat=PLAINTIFF_1_NAT

#PROD_UNLOAD_STATUS
report.table.prod_unload=PROD_UNLOAD_STATUS
report.table.prod_unload.columns.unloadid=UNLOAD_ID
report.table.prod_unload.columns.cbuid=CBUID
report.table.prod_unload.columns.groupid=GROUPID
report.table.prod_unload.columns.period=PERIOD
report.table.prod_unload.columns.registrationdataid=REGISTRATIONDATAID
report.table.prod_unload.columns.registrationfileid=REGISTRATIONFILEID
report.table.prod_unload.columns.controlfilename=CONTROLFILENAME
report.table.prod_unload.columns.requestedby=REQUESTED_BY
report.table.prod_unload.columns.unloaddate=UNLOAD_DATE
report.table.prod_unload.columns.resenddate=RESEND_DATE
report.table.prod_unload.columns.unloadby=UNLOAD_BY
report.table.prod_unload.columns.hkbrcno=BRC_NO
report.table.prod_unload.columns.hkcino=CI_NO
report.table.prod_unload.columns.otherregno=OTHER_REG_NO
report.table.prod_unload.columns.placeofreg=PLACE_OF_REG
report.table.prod_unload.columns.customerno=CUSTOMER_NO
report.table.prod_unload.columns.channel=CHANNEL
report.table.prod_unload.columns.reason=REASON
report.table.prod_unload.columns.date=DATE

#UPDATE
report.table.update.columns.groupid=groupid
report.table.update.columns.period=data_period
report.table.update.columns.date=date

#AI ORDERED LIST OF COVERPAGE
report.table.ai_ordered_list.columns.orderdate=ENQUIRYTIME
report.table.ai_ordered_list.columns.ainame=GROUP_NAME
report.table.ai_ordered_list.columns.product=PRODUCTUSAGE
report.table.ai_ordered_list.columns.reason=REASON
